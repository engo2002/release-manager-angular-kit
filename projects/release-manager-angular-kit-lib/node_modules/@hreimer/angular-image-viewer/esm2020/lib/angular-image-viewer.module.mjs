import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { AngularImageViewerComponent } from './angular-image-viewer.component';
import { FullScreenDirective } from './directives/full-screen.directive';
import * as i0 from "@angular/core";
// import { ImageViewerConfig } from 'dist/angular-image-viewer/public-api';
export class AngularImageViewerModule {
}
AngularImageViewerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: AngularImageViewerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AngularImageViewerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.3.0", ngImport: i0, type: AngularImageViewerModule, declarations: [AngularImageViewerComponent, FullScreenDirective], imports: [CommonModule,
        BrowserModule,
        FormsModule,
        BrowserAnimationsModule], exports: [AngularImageViewerComponent, FullScreenDirective] });
AngularImageViewerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: AngularImageViewerModule, imports: [CommonModule,
        BrowserModule,
        FormsModule,
        BrowserAnimationsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: AngularImageViewerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AngularImageViewerComponent, FullScreenDirective],
                    imports: [
                        CommonModule,
                        BrowserModule,
                        FormsModule,
                        BrowserAnimationsModule,
                    ],
                    exports: [AngularImageViewerComponent, FullScreenDirective]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1pbWFnZS12aWV3ZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1pbWFnZS12aWV3ZXIvc3JjL2xpYi9hbmd1bGFyLWltYWdlLXZpZXdlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0UsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0FBQ3pFLDRFQUE0RTtBQWM1RSxNQUFNLE9BQU8sd0JBQXdCOztxSEFBeEIsd0JBQXdCO3NIQUF4Qix3QkFBd0IsaUJBVHBCLDJCQUEyQixFQUFFLG1CQUFtQixhQUU3RCxZQUFZO1FBQ1osYUFBYTtRQUNiLFdBQVc7UUFDWCx1QkFBdUIsYUFFZiwyQkFBMkIsRUFBRSxtQkFBbUI7c0hBRS9DLHdCQUF3QixZQVBqQyxZQUFZO1FBQ1osYUFBYTtRQUNiLFdBQVc7UUFDWCx1QkFBdUI7MkZBSWQsd0JBQXdCO2tCQVZwQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLDJCQUEyQixFQUFFLG1CQUFtQixDQUFDO29CQUNoRSxPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixhQUFhO3dCQUNiLFdBQVc7d0JBQ1gsdUJBQXVCO3FCQUN4QjtvQkFDRCxPQUFPLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxtQkFBbUIsQ0FBQztpQkFDNUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQW5ndWxhckltYWdlVmlld2VyQ29tcG9uZW50IH0gZnJvbSAnLi9hbmd1bGFyLWltYWdlLXZpZXdlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRnVsbFNjcmVlbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9mdWxsLXNjcmVlbi5kaXJlY3RpdmUnO1xuLy8gaW1wb3J0IHsgSW1hZ2VWaWV3ZXJDb25maWcgfSBmcm9tICdkaXN0L2FuZ3VsYXItaW1hZ2Utdmlld2VyL3B1YmxpYy1hcGknO1xuXG5cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQW5ndWxhckltYWdlVmlld2VyQ29tcG9uZW50LCBGdWxsU2NyZWVuRGlyZWN0aXZlXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBCcm93c2VyTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIEJyb3dzZXJBbmltYXRpb25zTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbQW5ndWxhckltYWdlVmlld2VyQ29tcG9uZW50LCBGdWxsU2NyZWVuRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFySW1hZ2VWaWV3ZXJNb2R1bGUge1xuICAvKipcbiAgICogZm9yUm9vdFxuICAgKiBAcmV0dXJucyBBIG1vZHVsZSB3aXRoIGl0cyBwcm92aWRlciBkZXBlbmRlbmNpZXNcbiAgICovXG4gIC8vIHN0YXRpYyBmb3JSb290KGltYWdlVmlld2VyQ29uZmlnOiBJbWFnZVZpZXdlckNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAvLyAgIHJldHVybiB7XG4gIC8vICAgICBuZ01vZHVsZTogQW5ndWxhckltYWdlVmlld2VyTW9kdWxlLFxuICAvLyAgICAgcHJvdmlkZXJzOiBbXG4gIC8vICAgICAgIHtcbiAgLy8gICAgICAgICBwcm92aWRlOiBpbWFnZVZpZXdlckNvbmZpZyxcbiAgLy8gICAgICAgICB1c2VWYWx1ZTogaW1hZ2VWaWV3ZXJDb25maWdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgXVxuICAvLyAgIH07XG4gIC8vIH1cbn1cbiJdfQ==