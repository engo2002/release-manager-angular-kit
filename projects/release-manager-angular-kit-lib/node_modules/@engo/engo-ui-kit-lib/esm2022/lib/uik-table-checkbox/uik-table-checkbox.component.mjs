import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/table";
import * as i3 from "@angular/material/sort";
import * as i4 from "@angular/material/paginator";
import * as i5 from "@angular/material/checkbox";
import * as i6 from "../uik-status-label/uik-status-label.component";
export class UikTableCheckboxComponent {
    constructor() {
        this.columns = undefined;
        this.showStatusLabel = true;
        this.dataSource = new MatTableDataSource();
        this.enablePagination = false;
        this.enableSort = false;
        this.enableFiltering = false;
        this.enableMultipleChecked = true;
        this.checkboxClickedMultipleEmitter = new EventEmitter();
        this.checkboxClickedSingleEmitter = new EventEmitter();
        this.displayedColumns = [];
        this.checkboxClickedMultipleArray = [];
        this.checkboxClickedSingleArray = undefined;
        this.pageIndex = 0;
        this.pageSize = 0;
        this.correctIndex = 0;
    }
    ngOnInit() {
        this.renderDisplayedColumns();
    }
    ngAfterViewInit() {
        this.renderSorting();
        this.renderPagination();
        this.renderStatusLabel();
    }
    ngOnChanges(changes) {
        if (this.table) {
            if (changes["dataSource"]) {
                this.table.dataSource = this.dataSource;
            }
            this.table.renderRows();
            this.renderSorting();
            this.renderPagination();
            this.renderStatusLabel();
        }
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        if (this.dataSource.paginator) {
            this.dataSource.paginator.firstPage();
        }
        if (this.enableMultipleChecked === false) {
            this.checkboxClickedSingleArray = { elementId: -1 };
            this.emitCheckboxClickedSingle();
        }
        if (this.enableMultipleChecked === true) {
            this.checkboxClickedMultipleArray = [];
            this.emitCheckboxClickedMultiple();
        }
    }
    getSelectedRow(event, index) {
        if (this.paginator && this.enablePagination === true) {
            this.pageIndex = this.paginator.pageIndex;
            this.pageSize = this.paginator.pageSize;
            this.correctIndex = this.pageIndex * this.pageSize;
            index = index + this.correctIndex;
        }
        const elementId = this.dataSource.filteredData[index].id;
        if (event.checked === true) {
            if (this.enableMultipleChecked === false) {
                this.checkboxClickedSingleArray = { elementId };
                this.emitCheckboxClickedSingle();
            }
            if (this.enableMultipleChecked === true) {
                this.checkboxClickedMultipleArray.push({ elementId });
                this.emitCheckboxClickedMultiple();
            }
        }
        if (event.checked === false) {
            if (this.enableMultipleChecked === false) {
                this.checkboxClickedSingleArray = { elementId: -1 };
                this.emitCheckboxClickedSingle();
            }
            if (this.enableMultipleChecked === true) {
                const arrayIndex = this.checkboxClickedMultipleArray.findIndex(e => e.elementId === elementId);
                this.checkboxClickedMultipleArray.splice(arrayIndex, 1);
                this.emitCheckboxClickedMultiple();
            }
        }
    }
    onChangePagination() {
        if (this.enableMultipleChecked === false) {
            this.checkboxClickedSingleArray = { elementId: -1 };
            this.emitCheckboxClickedSingle();
        }
        if (this.enableMultipleChecked === true) {
            this.checkboxClickedMultipleArray = [];
            this.emitCheckboxClickedMultiple();
        }
    }
    checkSelectedMultipleInArray(id) {
        return this.checkboxClickedMultipleArray.findIndex(element => element.elementId === id);
    }
    emitCheckboxClickedMultiple() {
        this.checkboxClickedMultipleEmitter.emit(this.checkboxClickedMultipleArray);
    }
    emitCheckboxClickedSingle() {
        this.checkboxClickedSingleEmitter.emit(this.checkboxClickedSingleArray);
    }
    renderDisplayedColumns() {
        if (this.columns) {
            this.displayedColumns.push('checkboxColumn');
            for (const column of this.columns) {
                this.displayedColumns.push(column.name);
            }
        }
    }
    renderStatusLabel() {
        if (this.showStatusLabel) {
            if (!this.displayedColumns.includes('statusLabelColumn')) {
                this.displayedColumns.push('statusLabelColumn');
            }
            this.dataSource.data.forEach(element => element.statusLabelColumn = element.statusLabel.labelValue);
        }
    }
    renderSorting() {
        if (this.enableSort) {
            this.dataSource.sort = this.sort;
        }
    }
    renderPagination() {
        if (this.enablePagination) {
            this.dataSource.paginator = this.paginator;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableCheckboxComponent, selector: "engo-uik-table-checkbox", inputs: { columns: "columns", statusHeaderLabel: "statusHeaderLabel", showStatusLabel: "showStatusLabel", dataSource: "dataSource", enablePagination: "enablePagination", paginatorPageOptions: "paginatorPageOptions", enableSort: "enableSort", enableFiltering: "enableFiltering", enableMultipleChecked: "enableMultipleChecked" }, outputs: { checkboxClickedMultipleEmitter: "checkboxClickedMultipleEmitter", checkboxClickedSingleEmitter: "checkboxClickedSingleEmitter" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }, { propertyName: "table", first: true, predicate: MatTable, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n  <ng-container matColumnDef=\"checkboxColumn\">\n    <th *matHeaderCellDef mat-header-cell></th>\n    <td *matCellDef=\"let element; index as i;\" mat-cell>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\" *ngIf=\"enableMultipleChecked === true\"\n                    [checked]=\"checkSelectedMultipleInArray(element.id) !== -1\">\n      </mat-checkbox>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\"\n                    *ngIf=\"enableMultipleChecked === false\"\n                    [checked]=\"checkboxClickedSingleArray?.elementId === element.id\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let userdata; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator (page)=\"onChangePagination()\"\n               *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\" showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i3.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i4.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "component", type: i5.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex"], exportAs: ["matCheckbox"] }, { kind: "component", type: i6.UikStatusLabelComponent, selector: "engo-uik-status-label", inputs: ["labelData"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-checkbox', template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n  <ng-container matColumnDef=\"checkboxColumn\">\n    <th *matHeaderCellDef mat-header-cell></th>\n    <td *matCellDef=\"let element; index as i;\" mat-cell>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\" *ngIf=\"enableMultipleChecked === true\"\n                    [checked]=\"checkSelectedMultipleInArray(element.id) !== -1\">\n      </mat-checkbox>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\"\n                    *ngIf=\"enableMultipleChecked === false\"\n                    [checked]=\"checkboxClickedSingleArray?.elementId === element.id\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let userdata; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator (page)=\"onChangePagination()\"\n               *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\" showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { columns: [{
                type: Input
            }], statusHeaderLabel: [{
                type: Input
            }], showStatusLabel: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], enablePagination: [{
                type: Input
            }], paginatorPageOptions: [{
                type: Input
            }], enableSort: [{
                type: Input
            }], enableFiltering: [{
                type: Input
            }], enableMultipleChecked: [{
                type: Input
            }], checkboxClickedMultipleEmitter: [{
                type: Output
            }], checkboxClickedSingleEmitter: [{
                type: Output
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], table: [{
                type: ViewChild,
                args: [MatTable]
            }] } });
//# sourceMappingURL=data:application/json;base64,