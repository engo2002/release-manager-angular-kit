import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TwoFactorCreateDto } from '../model/twoFactorCreateDto';
import { TwoFactorDeleteDto } from '../model/twoFactorDeleteDto';
import { TwoFactorDto } from '../model/twoFactorDto';
import { TwoFactorLoginDto } from '../model/twoFactorLoginDto';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class TwoFactorAuthenticationApiService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param twoFactorDeleteDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    twoFactorAuthControllerDelete2Fa(twoFactorDeleteDto: TwoFactorDeleteDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    twoFactorAuthControllerDelete2Fa(twoFactorDeleteDto: TwoFactorDeleteDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    twoFactorAuthControllerDelete2Fa(twoFactorDeleteDto: TwoFactorDeleteDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * @param twoFactorCreateDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    twoFactorAuthControllerGenerateQrCode(twoFactorCreateDto: TwoFactorCreateDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<TwoFactorDto>;
    twoFactorAuthControllerGenerateQrCode(twoFactorCreateDto: TwoFactorCreateDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<TwoFactorDto>>;
    twoFactorAuthControllerGenerateQrCode(twoFactorCreateDto: TwoFactorCreateDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<TwoFactorDto>>;
    /**
     * @param username
     * @param userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    twoFactorAuthControllerGetActive(username?: string, userId?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    twoFactorAuthControllerGetActive(username?: string, userId?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    twoFactorAuthControllerGetActive(username?: string, userId?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * @param userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    twoFactorAuthControllerReset2Fa(userId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    twoFactorAuthControllerReset2Fa(userId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    twoFactorAuthControllerReset2Fa(userId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * @param twoFactorLoginDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    twoFactorAuthControllerSet2FaActiveForUser(twoFactorLoginDto: TwoFactorLoginDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    twoFactorAuthControllerSet2FaActiveForUser(twoFactorLoginDto: TwoFactorLoginDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    twoFactorAuthControllerSet2FaActiveForUser(twoFactorLoginDto: TwoFactorLoginDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwoFactorAuthenticationApiService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TwoFactorAuthenticationApiService>;
}
