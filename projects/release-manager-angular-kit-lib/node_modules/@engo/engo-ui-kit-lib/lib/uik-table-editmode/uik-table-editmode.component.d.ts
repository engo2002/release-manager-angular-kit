import { AfterViewInit, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import { IColumnsEdit } from './interfaces/uikEditTable.interface';
import * as i0 from "@angular/core";
export declare class UikTableEditmodeComponent implements OnInit, OnChanges, AfterViewInit {
    columns: IColumnsEdit[] | undefined;
    statusHeaderLabel?: string;
    showStatusLabel: boolean;
    dataSource: MatTableDataSource<any>;
    enablePagination: boolean;
    enableSort: boolean;
    hasPermissionWrite?: boolean;
    idColumnName: string;
    enableFiltering: boolean;
    saveEntryData: EventEmitter<any>;
    deleteEntryRowid: EventEmitter<any>;
    editRowId: EventEmitter<any>;
    callAction: EventEmitter<any>;
    paginator: MatPaginator | null;
    sort: MatSort;
    table: MatTable<any>;
    displayedColumns: string[];
    editMode: boolean;
    editModeIndex: number | null;
    pageIndex: number;
    pageSize: number;
    correctIndex: number;
    newData: any;
    change: number;
    constructor();
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    enableEditMode(index: number): Promise<void>;
    changeInputValue(backendName: string, index: number, backendPath?: string): void;
    emitSaveEntry(): void;
    deleteEntry(index: number): void;
    cancel(): void;
    onChangePagination(event: any): void;
    applyFilter(event: Event): void;
    getRowid(index: number): string;
    private renderDisplayedColumns;
    private renderStatusLabel;
    private renderSorting;
    private renderPagination;
    static ɵfac: i0.ɵɵFactoryDeclaration<UikTableEditmodeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UikTableEditmodeComponent, "engo-uik-table-editmode", never, { "columns": { "alias": "columns"; "required": false; }; "statusHeaderLabel": { "alias": "statusHeaderLabel"; "required": false; }; "showStatusLabel": { "alias": "showStatusLabel"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "enablePagination": { "alias": "enablePagination"; "required": false; }; "enableSort": { "alias": "enableSort"; "required": false; }; "hasPermissionWrite": { "alias": "hasPermissionWrite"; "required": false; }; "idColumnName": { "alias": "idColumnName"; "required": false; }; "enableFiltering": { "alias": "enableFiltering"; "required": false; }; }, { "saveEntryData": "saveEntryData"; "deleteEntryRowid": "deleteEntryRowid"; "editRowId": "editRowId"; "callAction": "callAction"; }, never, never, false, never>;
}
