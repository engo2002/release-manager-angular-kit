import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as _ from 'lodash';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/select";
import * as i5 from "@angular/material/core";
import * as i6 from "@ng-select/ng-select";
export class UikFormsComponent {
    constructor() {
        this.formStructure = [];
        this.submitData = new EventEmitter();
        this.inputLiveData = new EventEmitter();
        this.selectValue = new EventEmitter();
        this.selectSearchValue = new EventEmitter();
        this.validationResult = new EventEmitter();
        this.changes = 0;
        this.checkboxValue = false;
        this.inputNgModel = [];
        this.validationResults = [];
        this.selectSearchNgModelObject = [];
    }
    ngOnInit() {
        this.formStructure.forEach((element, index) => {
            if (element.inputContent && element.inputContent.inputValueDefault) {
                this.inputNgModel[index] = element.inputContent.inputValueDefault;
            }
            if (element.selectSearchContent) {
                this.selectSearchNgModelObject[element.selectSearchContent.selectIndex] = null;
            }
        });
    }
    ngAfterViewInit() {
        this.formStructure.forEach((element, index) => {
            if (element.inputContent) {
                if (element.inputContent.inputValueDefault) {
                    const htmlElement = document.getElementById('inp-' + index);
                    if (htmlElement && !_.isEmpty(htmlElement.value)) {
                        htmlElement.value = element.inputContent.inputValueDefault;
                    }
                }
            }
        });
    }
    onSubmit(form) {
        this.checkValidation();
        if (this.changes !== 0) {
            this.changes = 0;
            this.previousFormData = form.value;
            this.submitData.emit(form);
        }
    }
    onChange(form) {
        this.checkValidation();
        this.inputLiveData?.emit(form);
    }
    getSelectedValue(select) {
        this.selectValue.emit(select.value);
    }
    getSelectSearchValue(index) {
        this.changes++;
        this.selectSearchValue.emit({
            index,
            value: this.selectSearchNgModelObject[index]
        });
    }
    checkboxChangeEmit(event) {
        this.checkboxValue = event.checked;
    }
    checkValidation() {
        const results = [];
        this.formStructure.forEach((field, index) => {
            if (field.type === 'input' && field.inputContent) {
                const currentInput = this.inputNgModel[index];
                const result = {
                    valid: true,
                    value: String(currentInput),
                    errorMessage: []
                };
                if (field.inputContent.inputNgModelRequired && _.isEmpty(currentInput)) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextRequired) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextRequired);
                    }
                    else {
                        result.errorMessage.push('Das Feld ist ein Pflichtfeld.');
                    }
                }
                if (field.inputContent.inputNgModelMinLength && currentInput.length < field.inputContent.inputNgModelMinLength) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextLength) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextLength);
                    }
                    else {
                        result.errorMessage?.push('Der Wert entspricht nicht der Länge von mindestens ' + field.inputContent.inputNgModelMinLength + ' und maximal ' + field.inputContent.inputNgModelMaxLength + ' Zeichen.');
                    }
                }
                if (field.inputContent.inputNgModelMaxLength && currentInput.length > field.inputContent.inputNgModelMaxLength) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextLength) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextLength);
                    }
                    else {
                        result.errorMessage?.push('Der Wert entspricht nicht der Länge von mindestens ' + field.inputContent.inputNgModelMinLength + ' und maximal ' + field.inputContent.inputNgModelMaxLength + ' Zeichen.');
                    }
                }
                if (field.inputContent.inputValidationPattern && !new RegExp(field.inputContent.inputValidationPattern).test(currentInput)) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextPattern) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextPattern);
                    }
                    else {
                        result.errorMessage.push('Der Wert entspricht nicht der geforderten Struktur.');
                    }
                }
                results[index] = result;
            }
        });
        this.validationResults = results;
        this.validationResult.emit(this.validationResults);
        return results;
    }
    hasChanged(formfield, current) {
        if (formfield.inputName) {
            const previous = this.previousFormData ? this.previousFormData[formfield.inputName] : null;
            if (previous !== current) {
                this.changes++;
            }
            else {
                this.changes = 0;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikFormsComponent, selector: "engo-uik-forms", inputs: { formStructure: "formStructure" }, outputs: { submitData: "submitData", inputLiveData: "inputLiveData", selectValue: "selectValue", selectSearchValue: "selectSearchValue", validationResult: "validationResult" }, ngImport: i0, template: "<form #form=\"ngForm\" (change)=\"onChange(form)\" (ngSubmit)=\"onSubmit(form)\" class=\"form\" ngNativeValidate>\n\n  <ng-container *ngFor=\"let element of formStructure; let i = index\">\n    <div *ngIf=\"element.type === 'select' && element.selectContent\" [id]=\"'form-field-select'\">\n      <div class=\"formelement\">\n        <mat-form-field appearance=\"fill\" class=\"selectbox\">\n          <mat-label>{{element.selectContent.selectLabel}}</mat-label>\n          <mat-select (selectionChange)=\"getSelectedValue($event); changes = changes + 1\">\n            <mat-option *ngFor=\"let selectElement of element.selectContent.selectOptionItems\"\n                        [value]=\"selectElement.selectOptionValue\"> {{selectElement.selectOptionLabel}} </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'select-search' && element.selectSearchContent\" [class]=\"'select-search'\"\n         [id]=\"'form-field-select-search'\">\n      <label class=\"select-search-label\">{{element.selectSearchContent.label}}</label>\n      <ng-select (change)=\"getSelectSearchValue(element.selectSearchContent.selectIndex)\"\n                 [(ngModel)]=\"selectSearchNgModelObject[element.selectSearchContent.selectIndex]\"\n                 [bindLabel]=\"element.selectSearchContent.bindLabel\"\n                 [bindValue]=\"element.selectSearchContent.bindValue\"\n                 [items]=\"element.selectSearchContent.items | async\"\n                 [multiple]=\"element.selectSearchContent.multiple\"\n                 [placeholder]=\"element.selectSearchContent.placeholder\">\n      </ng-select>\n    </div>\n    <div *ngIf=\"element.type === 'input' && element.inputContent\" [class]=\"'form-field-input'\">\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === false\"\n           [class]=\"'form-field form-field-input form-field-input-novalidation'\">\n        <label [for]=\"'inp-novalidation-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event)\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-novalidation-' + i\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\"\n                 [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\">\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n      </div>\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === true\"\n           [class]=\"'form-field form-field-input form-field-input-validation'\">\n        <label [for]=\"'inp-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event); checkValidation()\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-' + i\"\n                 [maxlength]=\"element.inputContent.inputNgModelMaxLength ? element.inputContent.inputNgModelMaxLength : ''\"\n                 [minlength]=\"element.inputContent.inputNgModelMinLength ? element.inputContent.inputNgModelMinLength : ''\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\" [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\"\n                 required>\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n        <div *ngIf=\"!!validationResults[i]\">\n          <div *ngIf=\"validationResults[i].errorMessage.length > 0\">\n            <p *ngFor=\"let error of validationResults[i].errorMessage\" class=\"alert\">{{error}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'checkbox' && element.checkboxContent\" [class]=\"'form-field form-field-checkbox'\">\n      <input (change)=\"checkboxChangeEmit($event); changes = changes + 1\"\n             [checked]=\"element.checkboxContent.checkboxCheckedState\"\n             [id]=\"element.checkboxContent.checkboxId ? element.checkboxContent.checkboxId : element.checkboxContent.checkboxName\" [name]=\"element.checkboxContent.checkboxName\" class=\"inp-cbx\"\n             ngModel\n             style=\"display: none\" type=\"checkbox\"><label [for]=\"element.checkboxContent.checkboxName\"\n                                                                                         class=\"cbx\"><span\n      id=\"span-cbx-checkbox\"><svg height=\"10px\" viewbox=\"0 0 12 10\" width=\"12px\">\n                <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\n            </svg></span><span class=\"label\"\n                               id=\"span-cbx-label\">{{element.checkboxContent.checkboxLabel}}</span></label>\n\n    </div>\n\n    <div *ngIf=\"element.type === 'submit' && element.submitContent\" [class]=\"'form-field form-field-submit'\">\n      <button [class]=\"element.submitContent.submitDisabled || !form.valid || changes === 0 ? 'btn btn-disabled' : 'btn btn-submit'\"\n              [disabled]=\"!(element.submitContent) || element.submitContent.submitDisabled || !form.valid || changes === 0\"\n              type=\"submit\"\n              value=\"Send\"><i\n        [class]=\"!(element.submitContent) || element.submitContent.submitIconFaClass ? element.submitContent.submitIconFaClass : 'fa fa-cog'\"\n        class=\"btn-icon\"></i>{{element.submitContent.submitLabel}}</button>\n    </div>\n\n    <div *ngIf=\"element.type === 'header' && element.headerContent\" class=\"form-field form-field-header\">\n      <h1 *ngIf=\"element.headerContent.headerFormat === 'h1'\">{{element.headerContent.headerTitle}}</h1>\n      <h2 *ngIf=\"element.headerContent.headerFormat === 'h2'\">{{element.headerContent.headerTitle}}</h2>\n      <h3 *ngIf=\"element.headerContent.headerFormat === 'h3'\">{{element.headerContent.headerTitle}}</h3>\n    </div>\n  </ng-container>\n</form>\n", styles: [".select-search{margin-top:12px;margin-bottom:12px}.select-search-label{color:#00000080}mat-form-field{width:100%;width:-webkit-fill-available;width:available}.alert{font-size:11pt!important}.form-field{margin-bottom:8px}.form-field-input{display:grid}.form-field-checkbox{margin-top:16px;margin-bottom:16px}.form{height:20%;display:inline-grid;font-family:Open Sans,sans-serif!important;font-weight:500!important;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;box-sizing:border-box;width:100%;max-width:500px}.inp{position:relative;margin:auto;width:100%;border-radius:3px;overflow:hidden}.inp .label{position:absolute;top:20px;left:4px;font-size:14px;color:#00000080;font-weight:500;transform-origin:0 0;transform:translateZ(0);transition:all .2s ease;pointer-events:none}.inp .focus-bg{position:absolute;top:0;left:0;width:100%;height:100%;background:#0000000d;z-index:-1;transform:scaleX(0);transform-origin:left}.inp input{appearance:none;width:100%;border:0;font-family:Open Sans,sans-serif!important;font-weight:500!important;padding:32px 4px 16px;height:28px;font-size:12px;font-weight:400;background:#fff0;box-shadow:inset 0 -1px #0000004d;color:#000;transition:all .15s ease}.inp input:hover{background:#c3c3c3;box-shadow:inset 0 -1px #00000080}.inp input:not(:placeholder-shown)+.label{color:#00000080;transform:translate3d(0,-12px,0) scale(.75)}.inp input:focus{background:#0000000d;outline:none;box-shadow:inset 0 -2px #00823e}.inp input:focus+.label{color:#01592d;transform:translate3d(0,-12px,0) scale(.75)}::ng-deep .snackbar{background:#01592d}::ng-deep .snackbar-error{background:#a71b03!important}.cbx{margin:auto;-webkit-user-select:none;user-select:none;cursor:pointer}.cbx span{display:inline-block;vertical-align:middle;transform:translateZ(0)}.cbx span:first-child{position:relative;width:18px;height:18px;border-radius:3px;transform:scale(1);vertical-align:middle;border:1px solid #9098a9;transition:all .2s ease}.cbx span:first-child svg{position:absolute;top:3px;left:2px;fill:none;stroke:#fff;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:16px;stroke-dashoffset:16px;transition:all .3s ease;transition-delay:.1s;transform:translateZ(0)}.cbx span:last-child{padding-left:8px}.cbx:hover span:first-child{border-color:#00823e}.inp-cbx:checked+.cbx span:first-child{background:#00823e;border-color:#949494;animation:wave .4s ease}.inp-cbx:checked+.cbx span:first-child svg{stroke-dashoffset:0}.inp-cbx:checked+.cbx span:first-child:before{transform:scale(3.5);opacity:0;transition:all .6s ease}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { kind: "directive", type: i2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i2.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatLabel, selector: "mat-label" }, { kind: "component", type: i4.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "panelWidth", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i5.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-forms', template: "<form #form=\"ngForm\" (change)=\"onChange(form)\" (ngSubmit)=\"onSubmit(form)\" class=\"form\" ngNativeValidate>\n\n  <ng-container *ngFor=\"let element of formStructure; let i = index\">\n    <div *ngIf=\"element.type === 'select' && element.selectContent\" [id]=\"'form-field-select'\">\n      <div class=\"formelement\">\n        <mat-form-field appearance=\"fill\" class=\"selectbox\">\n          <mat-label>{{element.selectContent.selectLabel}}</mat-label>\n          <mat-select (selectionChange)=\"getSelectedValue($event); changes = changes + 1\">\n            <mat-option *ngFor=\"let selectElement of element.selectContent.selectOptionItems\"\n                        [value]=\"selectElement.selectOptionValue\"> {{selectElement.selectOptionLabel}} </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'select-search' && element.selectSearchContent\" [class]=\"'select-search'\"\n         [id]=\"'form-field-select-search'\">\n      <label class=\"select-search-label\">{{element.selectSearchContent.label}}</label>\n      <ng-select (change)=\"getSelectSearchValue(element.selectSearchContent.selectIndex)\"\n                 [(ngModel)]=\"selectSearchNgModelObject[element.selectSearchContent.selectIndex]\"\n                 [bindLabel]=\"element.selectSearchContent.bindLabel\"\n                 [bindValue]=\"element.selectSearchContent.bindValue\"\n                 [items]=\"element.selectSearchContent.items | async\"\n                 [multiple]=\"element.selectSearchContent.multiple\"\n                 [placeholder]=\"element.selectSearchContent.placeholder\">\n      </ng-select>\n    </div>\n    <div *ngIf=\"element.type === 'input' && element.inputContent\" [class]=\"'form-field-input'\">\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === false\"\n           [class]=\"'form-field form-field-input form-field-input-novalidation'\">\n        <label [for]=\"'inp-novalidation-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event)\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-novalidation-' + i\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\"\n                 [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\">\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n      </div>\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === true\"\n           [class]=\"'form-field form-field-input form-field-input-validation'\">\n        <label [for]=\"'inp-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event); checkValidation()\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-' + i\"\n                 [maxlength]=\"element.inputContent.inputNgModelMaxLength ? element.inputContent.inputNgModelMaxLength : ''\"\n                 [minlength]=\"element.inputContent.inputNgModelMinLength ? element.inputContent.inputNgModelMinLength : ''\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\" [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\"\n                 required>\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n        <div *ngIf=\"!!validationResults[i]\">\n          <div *ngIf=\"validationResults[i].errorMessage.length > 0\">\n            <p *ngFor=\"let error of validationResults[i].errorMessage\" class=\"alert\">{{error}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'checkbox' && element.checkboxContent\" [class]=\"'form-field form-field-checkbox'\">\n      <input (change)=\"checkboxChangeEmit($event); changes = changes + 1\"\n             [checked]=\"element.checkboxContent.checkboxCheckedState\"\n             [id]=\"element.checkboxContent.checkboxId ? element.checkboxContent.checkboxId : element.checkboxContent.checkboxName\" [name]=\"element.checkboxContent.checkboxName\" class=\"inp-cbx\"\n             ngModel\n             style=\"display: none\" type=\"checkbox\"><label [for]=\"element.checkboxContent.checkboxName\"\n                                                                                         class=\"cbx\"><span\n      id=\"span-cbx-checkbox\"><svg height=\"10px\" viewbox=\"0 0 12 10\" width=\"12px\">\n                <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\n            </svg></span><span class=\"label\"\n                               id=\"span-cbx-label\">{{element.checkboxContent.checkboxLabel}}</span></label>\n\n    </div>\n\n    <div *ngIf=\"element.type === 'submit' && element.submitContent\" [class]=\"'form-field form-field-submit'\">\n      <button [class]=\"element.submitContent.submitDisabled || !form.valid || changes === 0 ? 'btn btn-disabled' : 'btn btn-submit'\"\n              [disabled]=\"!(element.submitContent) || element.submitContent.submitDisabled || !form.valid || changes === 0\"\n              type=\"submit\"\n              value=\"Send\"><i\n        [class]=\"!(element.submitContent) || element.submitContent.submitIconFaClass ? element.submitContent.submitIconFaClass : 'fa fa-cog'\"\n        class=\"btn-icon\"></i>{{element.submitContent.submitLabel}}</button>\n    </div>\n\n    <div *ngIf=\"element.type === 'header' && element.headerContent\" class=\"form-field form-field-header\">\n      <h1 *ngIf=\"element.headerContent.headerFormat === 'h1'\">{{element.headerContent.headerTitle}}</h1>\n      <h2 *ngIf=\"element.headerContent.headerFormat === 'h2'\">{{element.headerContent.headerTitle}}</h2>\n      <h3 *ngIf=\"element.headerContent.headerFormat === 'h3'\">{{element.headerContent.headerTitle}}</h3>\n    </div>\n  </ng-container>\n</form>\n", styles: [".select-search{margin-top:12px;margin-bottom:12px}.select-search-label{color:#00000080}mat-form-field{width:100%;width:-webkit-fill-available;width:available}.alert{font-size:11pt!important}.form-field{margin-bottom:8px}.form-field-input{display:grid}.form-field-checkbox{margin-top:16px;margin-bottom:16px}.form{height:20%;display:inline-grid;font-family:Open Sans,sans-serif!important;font-weight:500!important;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;box-sizing:border-box;width:100%;max-width:500px}.inp{position:relative;margin:auto;width:100%;border-radius:3px;overflow:hidden}.inp .label{position:absolute;top:20px;left:4px;font-size:14px;color:#00000080;font-weight:500;transform-origin:0 0;transform:translateZ(0);transition:all .2s ease;pointer-events:none}.inp .focus-bg{position:absolute;top:0;left:0;width:100%;height:100%;background:#0000000d;z-index:-1;transform:scaleX(0);transform-origin:left}.inp input{appearance:none;width:100%;border:0;font-family:Open Sans,sans-serif!important;font-weight:500!important;padding:32px 4px 16px;height:28px;font-size:12px;font-weight:400;background:#fff0;box-shadow:inset 0 -1px #0000004d;color:#000;transition:all .15s ease}.inp input:hover{background:#c3c3c3;box-shadow:inset 0 -1px #00000080}.inp input:not(:placeholder-shown)+.label{color:#00000080;transform:translate3d(0,-12px,0) scale(.75)}.inp input:focus{background:#0000000d;outline:none;box-shadow:inset 0 -2px #00823e}.inp input:focus+.label{color:#01592d;transform:translate3d(0,-12px,0) scale(.75)}::ng-deep .snackbar{background:#01592d}::ng-deep .snackbar-error{background:#a71b03!important}.cbx{margin:auto;-webkit-user-select:none;user-select:none;cursor:pointer}.cbx span{display:inline-block;vertical-align:middle;transform:translateZ(0)}.cbx span:first-child{position:relative;width:18px;height:18px;border-radius:3px;transform:scale(1);vertical-align:middle;border:1px solid #9098a9;transition:all .2s ease}.cbx span:first-child svg{position:absolute;top:3px;left:2px;fill:none;stroke:#fff;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:16px;stroke-dashoffset:16px;transition:all .3s ease;transition-delay:.1s;transform:translateZ(0)}.cbx span:last-child{padding-left:8px}.cbx:hover span:first-child{border-color:#00823e}.inp-cbx:checked+.cbx span:first-child{background:#00823e;border-color:#949494;animation:wave .4s ease}.inp-cbx:checked+.cbx span:first-child svg{stroke-dashoffset:0}.inp-cbx:checked+.cbx span:first-child:before{transform:scale(3.5);opacity:0;transition:all .6s ease}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { formStructure: [{
                type: Input
            }], submitData: [{
                type: Output
            }], inputLiveData: [{
                type: Output
            }], selectValue: [{
                type: Output
            }], selectSearchValue: [{
                type: Output
            }], validationResult: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,