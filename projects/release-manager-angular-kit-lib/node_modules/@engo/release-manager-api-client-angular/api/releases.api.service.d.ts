import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CreateEditReleaseDto } from '../model/createEditReleaseDto';
import { PartialTypeClass } from '../model/partialTypeClass';
import { Release } from '../model/release';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class ReleasesApiService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param id releaseId
     * @param fieldType e.g. majorField, minorField, bugfixField, otherField
     * @param partialTypeClass
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerAddReleaseField(id: string, fieldType: string, partialTypeClass: PartialTypeClass, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Release>;
    releaseControllerAddReleaseField(id: string, fieldType: string, partialTypeClass: PartialTypeClass, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Release>>;
    releaseControllerAddReleaseField(id: string, fieldType: string, partialTypeClass: PartialTypeClass, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Release>>;
    /**
     * @param projectId projectId
     * @param createEditReleaseDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerCreateRelease(projectId: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Release>;
    releaseControllerCreateRelease(projectId: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Release>>;
    releaseControllerCreateRelease(projectId: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Release>>;
    /**
     * @param id releaseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerDeleteRelease(id: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<boolean>;
    releaseControllerDeleteRelease(id: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<boolean>>;
    releaseControllerDeleteRelease(id: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<boolean>>;
    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerFindAllReleases(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Array<Release>>;
    releaseControllerFindAllReleases(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Array<Release>>>;
    releaseControllerFindAllReleases(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Array<Release>>>;
    /**
     * @param id releaseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerFindReleaseById(id: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Release>;
    releaseControllerFindReleaseById(id: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Release>>;
    releaseControllerFindReleaseById(id: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Release>>;
    /**
     * @param projectId projectId
     * @param releaseNumber Release Number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerFindReleaseByProjectIdAndReleaseNumber(projectId: string, releaseNumber: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Release>;
    releaseControllerFindReleaseByProjectIdAndReleaseNumber(projectId: string, releaseNumber: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Release>>;
    releaseControllerFindReleaseByProjectIdAndReleaseNumber(projectId: string, releaseNumber: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Release>>;
    /**
     * @param projectId projectId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerFindReleasesByProjectId(projectId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Array<Release>>;
    releaseControllerFindReleasesByProjectId(projectId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Array<Release>>>;
    releaseControllerFindReleasesByProjectId(projectId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Array<Release>>>;
    /**
     * @param id releaseId
     * @param createEditReleaseDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseControllerUpdateRelease(id: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Release>;
    releaseControllerUpdateRelease(id: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Release>>;
    releaseControllerUpdateRelease(id: string, createEditReleaseDto: CreateEditReleaseDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Release>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReleasesApiService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReleasesApiService>;
}
