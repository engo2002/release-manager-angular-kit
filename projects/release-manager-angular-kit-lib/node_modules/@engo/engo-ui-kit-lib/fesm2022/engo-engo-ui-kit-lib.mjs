import * as i0 from '@angular/core';
import { Component, NgModule, EventEmitter, Input, Output, ViewChild, Inject } from '@angular/core';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from 'primeng/skeleton';
import { SkeletonModule } from 'primeng/skeleton';
import * as i2 from '@angular/material/menu';
import { MatMenuModule } from '@angular/material/menu';
import * as i2$1 from '@angular/material/slide-toggle';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import * as i3 from '@angular/material/badge';
import { MatBadgeModule } from '@angular/material/badge';
import * as _ from 'lodash';
import { cloneDeep } from 'lodash';
import * as i4 from 'primeng/dropdown';
import { DropdownModule } from 'primeng/dropdown';
import * as i5 from 'primeng/api';
import * as i2$2 from '@angular/forms';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i7 from 'primeng/multiselect';
import { MultiSelectModule } from 'primeng/multiselect';
import * as i4$1 from '@angular/material/select';
import { MatSelectModule } from '@angular/material/select';
import * as i1$2 from '@angular/router';
import { NavigationCancel, NavigationEnd, NavigationStart } from '@angular/router';
import * as i3$1 from '@angular/material/progress-bar';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import * as i3$2 from '@angular/material/form-field';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i5$1 from '@angular/material/core';
import * as i6 from '@ng-select/ng-select';
import { NgSelectModule } from '@ng-select/ng-select';
import * as i4$2 from '@angular/material/paginator';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import * as i3$3 from '@angular/material/sort';
import { MatSort, MatSortModule } from '@angular/material/sort';
import * as i2$3 from '@angular/material/table';
import { MatTableDataSource, MatTable, MatTableModule } from '@angular/material/table';
import * as i5$2 from '@angular/material/checkbox';
import { MatCheckboxModule } from '@angular/material/checkbox';
import * as i1$3 from '@angular/material/dialog';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';

class UikFormLoadingComponent {
    constructor() {
    }
    ngOnInit() {
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikFormLoadingComponent, selector: "engo-uik-form-loading", ngImport: i0, template: "<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"60px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n\n<div class=\"button-loading-container\">\n  <div class=\"skeleton\">\n    <p-skeleton height=\"2rem\" width=\"100px\"></p-skeleton>\n  </div>\n  <div class=\"skeleton\">\n    <p-skeleton height=\"2rem\" width=\"100px\"></p-skeleton>\n  </div>\n</div>\n", styles: [".button-loading-container{display:flex;justify-content:space-between;margin-top:40px;width:250px}.skeleton{margin-top:12px}\n"], dependencies: [{ kind: "component", type: i1.Skeleton, selector: "p-skeleton", inputs: ["styleClass", "style", "shape", "animation", "borderRadius", "size", "width", "height"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-form-loading', template: "<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"60px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n<div class=\"skeleton\">\n  <p-skeleton height=\"30px\" width=\"200px\"></p-skeleton>\n</div>\n\n<div class=\"button-loading-container\">\n  <div class=\"skeleton\">\n    <p-skeleton height=\"2rem\" width=\"100px\"></p-skeleton>\n  </div>\n  <div class=\"skeleton\">\n    <p-skeleton height=\"2rem\" width=\"100px\"></p-skeleton>\n  </div>\n</div>\n", styles: [".button-loading-container{display:flex;justify-content:space-between;margin-top:40px;width:250px}.skeleton{margin-top:12px}\n"] }]
        }], ctorParameters: function () { return []; } });

class UikFormLoadingModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingModule, declarations: [UikFormLoadingComponent], imports: [CommonModule,
            SkeletonModule], exports: [UikFormLoadingComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingModule, imports: [CommonModule,
            SkeletonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikFormLoadingComponent
                    ],
                    imports: [
                        CommonModule,
                        SkeletonModule
                    ],
                    exports: [
                        UikFormLoadingComponent
                    ]
                }]
        }] });

class UikTableMoreActions {
    constructor() {
        this.faIcon = "fa-solid fa-ellipsis";
        this.label = "Weitere Aktionen";
        this.iconStyle = '';
        this.actions = [];
        this.actionEmitter = new EventEmitter();
    }
    ngOnInit() {
    }
    isDisabled(index) {
        return this.actions[index].disabled;
    }
    emitActionClick(action) {
        this.actionEmitter.emit(action);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActions, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableMoreActions, selector: "engo-uik-table-more-actions", inputs: { faIcon: "faIcon", label: "label", iconStyle: "iconStyle", actions: "actions" }, outputs: { actionEmitter: "actionEmitter" }, ngImport: i0, template: "<button #moreActionsTrigger=\"matMenuTrigger\" [class.menu-opened]=\"moreActionsTrigger.menuOpen\"\n        [matMenuTriggerFor]=\"moreActions\"\n        class=\"btn btn-white-border-gray more-actions-button\"><i [ngClass]=\"faIcon\" [style]=\"iconStyle\"\n                                                                 class=\"action-icon\"></i>{{label}}\n</button>\n<mat-menu #moreActions>\n  <div *ngFor=\"let action of actions; index as index\" class=\"more-actions-option\">\n    <button (click)=\"emitActionClick(action)\" [disabled]=\"isDisabled(index)\" mat-menu-item><i\n      [class]=\"action.iconClass + ' btn-icon'\"></i>{{action.description}}\n    </button>\n  </div>\n</mat-menu>\n", styles: [".more-actions-container{display:flex}.action-icon{margin-right:4px;vertical-align:middle;font-size:24px}.more-actions-button{padding:8px 20px;margin:8px 12px 12px 8px}.menu-opened{background-color:var(--engo-green);color:var(--engo-white);border-color:var(--engo-white)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i2.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i2.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActions, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-more-actions', template: "<button #moreActionsTrigger=\"matMenuTrigger\" [class.menu-opened]=\"moreActionsTrigger.menuOpen\"\n        [matMenuTriggerFor]=\"moreActions\"\n        class=\"btn btn-white-border-gray more-actions-button\"><i [ngClass]=\"faIcon\" [style]=\"iconStyle\"\n                                                                 class=\"action-icon\"></i>{{label}}\n</button>\n<mat-menu #moreActions>\n  <div *ngFor=\"let action of actions; index as index\" class=\"more-actions-option\">\n    <button (click)=\"emitActionClick(action)\" [disabled]=\"isDisabled(index)\" mat-menu-item><i\n      [class]=\"action.iconClass + ' btn-icon'\"></i>{{action.description}}\n    </button>\n  </div>\n</mat-menu>\n", styles: [".more-actions-container{display:flex}.action-icon{margin-right:4px;vertical-align:middle;font-size:24px}.more-actions-button{padding:8px 20px;margin:8px 12px 12px 8px}.menu-opened{background-color:var(--engo-green);color:var(--engo-white);border-color:var(--engo-white)}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { faIcon: [{
                type: Input
            }], label: [{
                type: Input
            }], iconStyle: [{
                type: Input
            }], actions: [{
                type: Input
            }], actionEmitter: [{
                type: Output
            }] } });

class UikTableMoreActionsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActionsModule, declarations: [UikTableMoreActions], imports: [CommonModule,
            MatMenuModule], exports: [UikTableMoreActions] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActionsModule, imports: [CommonModule,
            MatMenuModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableMoreActionsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableMoreActions
                    ],
                    exports: [
                        UikTableMoreActions
                    ],
                    imports: [
                        CommonModule,
                        MatMenuModule
                    ]
                }]
        }] });

class UikTableLoadingComponent {
    constructor() {
    }
    ngOnInit() {
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableLoadingComponent, selector: "engo-uik-table-loading", ngImport: i0, template: "<p-skeleton height=\"250px\" width=\"100%\"></p-skeleton>\n", styles: [""], dependencies: [{ kind: "component", type: i1.Skeleton, selector: "p-skeleton", inputs: ["styleClass", "style", "shape", "animation", "borderRadius", "size", "width", "height"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-loading', template: "<p-skeleton height=\"250px\" width=\"100%\"></p-skeleton>\n" }]
        }], ctorParameters: function () { return []; } });

class UikTableLoadingModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingModule, declarations: [UikTableLoadingComponent], imports: [CommonModule,
            SkeletonModule], exports: [UikTableLoadingComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingModule, imports: [CommonModule,
            SkeletonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableLoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableLoadingComponent
                    ],
                    imports: [
                        CommonModule,
                        SkeletonModule
                    ],
                    exports: [
                        UikTableLoadingComponent
                    ]
                }]
        }] });

class UikTableFilterMenuComponent {
    constructor() {
        this.label = "Filter";
        this.filters = [];
        this.filterStatusEmitter = new EventEmitter();
    }
    get filterActiveCount() {
        return this.filters.filter((f) => f.active === true).length;
    }
    toggleFilter($event, index) {
        this.filters[index].active = $event.checked;
        this.filterStatusEmitter.emit(this.filters[index]);
    }
    getCount(index) {
        return this.filters[index].count;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableFilterMenuComponent, selector: "engo-uik-table-filter-menu", inputs: { label: "label", filters: "filters" }, outputs: { filterStatusEmitter: "filterStatusEmitter" }, ngImport: i0, template: "<button #filtertrigger=\"matMenuTrigger\" [class.menu-opened]=\"filtertrigger.menuOpen\"\n        [matBadge]=\"filterActiveCount !== 0 ? filterActiveCount : undefined\" [matMenuTriggerFor]=\"feedFilter\"\n        class=\"btn btn-white-border-gray filter-button\">\n  <i class=\"fa-solid fa-filter filter-icon\"></i><span\n  style=\"text-overflow: ellipsis; overflow: hidden;\">{{label}}</span>\n</button>\n<mat-menu #feedFilter>\n  <div (click)=\"$event.stopPropagation()\" *ngFor=\"let filter of filters; index as index\" class=\"filter-container\">\n    <mat-slide-toggle (change)=\"toggleFilter($event, index)\" [checked]=\"filter.active\">\n      <span>{{filter.description}} {{getCount(index) && getCount(index) > 0 ? '(' + getCount(index) + ')' : ''}}</span>\n    </mat-slide-toggle>\n  </div>\n</mat-menu>\n", styles: [".filter-button{padding:8px 20px;margin:8px 12px 12px 8px}.filter-icon{margin-right:4px;vertical-align:middle}.filter-container{display:flex;flex-direction:column;padding:8px 12px}.menu-opened{background-color:var(--engo-dark-blue);color:var(--engo-white);border-color:var(--engo-white)}/deep/ .mat-mdc-menu-panel{max-width:500px!important}/deep/ .mat-mdc-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-thumb{background-color:var(--engo-light-blue)!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex"], exportAs: ["matSlideToggle"] }, { kind: "directive", type: i3.MatBadge, selector: "[matBadge]", inputs: ["matBadgeDisabled", "matBadgeColor", "matBadgeOverlap", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "component", type: i2.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "directive", type: i2.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-filter-menu', template: "<button #filtertrigger=\"matMenuTrigger\" [class.menu-opened]=\"filtertrigger.menuOpen\"\n        [matBadge]=\"filterActiveCount !== 0 ? filterActiveCount : undefined\" [matMenuTriggerFor]=\"feedFilter\"\n        class=\"btn btn-white-border-gray filter-button\">\n  <i class=\"fa-solid fa-filter filter-icon\"></i><span\n  style=\"text-overflow: ellipsis; overflow: hidden;\">{{label}}</span>\n</button>\n<mat-menu #feedFilter>\n  <div (click)=\"$event.stopPropagation()\" *ngFor=\"let filter of filters; index as index\" class=\"filter-container\">\n    <mat-slide-toggle (change)=\"toggleFilter($event, index)\" [checked]=\"filter.active\">\n      <span>{{filter.description}} {{getCount(index) && getCount(index) > 0 ? '(' + getCount(index) + ')' : ''}}</span>\n    </mat-slide-toggle>\n  </div>\n</mat-menu>\n", styles: [".filter-button{padding:8px 20px;margin:8px 12px 12px 8px}.filter-icon{margin-right:4px;vertical-align:middle}.filter-container{display:flex;flex-direction:column;padding:8px 12px}.menu-opened{background-color:var(--engo-dark-blue);color:var(--engo-white);border-color:var(--engo-white)}/deep/ .mat-mdc-menu-panel{max-width:500px!important}/deep/ .mat-mdc-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-thumb{background-color:var(--engo-light-blue)!important}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { label: [{
                type: Input
            }], filters: [{
                type: Input
            }], filterStatusEmitter: [{
                type: Output
            }] } });

class UikTableFilterMenuModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuModule, declarations: [UikTableFilterMenuComponent], imports: [CommonModule,
            MatSlideToggleModule,
            MatBadgeModule,
            MatMenuModule], exports: [UikTableFilterMenuComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuModule, imports: [CommonModule,
            MatSlideToggleModule,
            MatBadgeModule,
            MatMenuModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableFilterMenuComponent
                    ],
                    exports: [
                        UikTableFilterMenuComponent
                    ],
                    imports: [
                        CommonModule,
                        MatSlideToggleModule,
                        MatBadgeModule,
                        MatMenuModule
                    ]
                }]
        }] });

class UikTableFilterByListMenuComponent {
    constructor() {
        this.selectedOptions = [];
        this.selectedOptionModel = { id: '', label: '' };
        this.selectedOptionsModel = [];
        this.selectedOption = '';
        this.filteredOptions = [];
        this.filteredOption = '';
        this.options = [];
        this.label = 'Filtern';
        this.multiple = true;
        this.filterStatusEmitter = new EventEmitter();
    }
    ngOnInit() {
    }
    emit() {
        this.filteredOption = cloneDeep(this.selectedOption);
        this.filteredOptions = cloneDeep(this.selectedOptions);
        this.filterStatusEmitter.emit(this.multiple ? this.selectedOptions : this.selectedOption);
    }
    clear() {
        this.selectedOptions = [];
        this.selectedOption = '';
        this.selectedOptionsModel = [];
        this.selectedOptionModel = { id: '', label: '' };
        this.filteredOption = '';
        this.filteredOptions = [];
        this.filterStatusEmitter.emit(this.selectedOptions);
    }
    onSelectChange($event) {
        if (!!$event.value) {
            if (this.multiple) {
                this.selectedOptions = $event.value.map((v) => v.id);
            }
            else {
                this.selectedOption = $event.value.id;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableFilterByListMenuComponent, selector: "engo-uik-table-filter-by-list-menu", inputs: { options: "options", label: "label", multiple: "multiple" }, outputs: { filterStatusEmitter: "filterStatusEmitter" }, ngImport: i0, template: "<button #filtertrigger=\"matMenuTrigger\" [class.menu-opened]=\"filtertrigger.menuOpen\"\n        [matBadge]=\"!multiple && filteredOption !== '' ? 1 : filteredOptions.length === 0 ? undefined : filteredOptions.length\"\n        [matMenuTriggerFor]=\"filterMenu\"\n        class=\"btn btn-white-border-gray filter-button\">\n  <i class=\"fa-solid fa-filter filter-icon\"></i>{{label}}\n</button>\n<mat-menu #filterMenu>\n  <div (click)=\"$event.stopPropagation(); $event.preventDefault\" class=\"filter-container\">\n    <div class=\"multiple-filter\" *ngIf=\"multiple\">\n      <p-multiSelect [options]=\"options\" appendTo=\"body\" (onChange)=\"onSelectChange($event)\" [placeholder]=\"label\" [filter]=\"true\" filterBy=\"label\" [showClear]=\"false\" [(ngModel)]=\"selectedOptionsModel\" [defaultLabel]=\"label\" optionLabel=\"label\"\n                     class=\"multiselect-custom\">\n        <ng-template let-value pTemplate=\"selectedItems\">\n          <div class=\"country-item country-item-value\" *ngFor=\"let option of selectedOptionsModel\">\n            <div>{{option.label}}</div>\n          </div>\n          <div *ngIf=\"!selectedOptionsModel || selectedOptionsModel.length === 0\" class=\"country-placeholder\">\n            {{label}}\n          </div>\n        </ng-template>\n        <ng-template let-each pTemplate=\"item\">\n          <div class=\"country-item\">\n            <div>{{each.label}}</div>\n          </div>\n        </ng-template>\n      </p-multiSelect>\n    </div>\n    <div class=\"single-filter\" *ngIf=\"!multiple\">\n      <p-dropdown (onChange)=\"onSelectChange($event)\" appendTo=\"body\" [(ngModel)]=\"selectedOptionModel\" [filter]=\"true\" [options]=\"options\" [showClear]=\"false\" filterBy=\"label\" optionLabel=\"label\" [placeholder]=\"label\">\n        <ng-template pTemplate=\"selectedItem\">\n          <div *ngIf=\"!!selectedOptionModel\">\n            <div>{{ selectedOptionModel.label }}</div>\n          </div>\n        </ng-template>\n        <ng-template let-each pTemplate=\"item\">\n          <div>\n            <div>{{ each.label }}</div>\n          </div>\n        </ng-template>\n      </p-dropdown>\n    </div>\n  </div>\n  <div class=\"save-button-container\">\n    <button (click)=\"clear()\" class=\"btn btn-white-border-gray action-button\"><i class=\"fa fa-ban btn-icon\"></i>Filter\n      l\u00F6schen\n    </button>\n    <button (click)=\"emit()\" [class.btn-disabled]=\"selectedOptions.length === 0 && selectedOption === ''\"\n            [disabled]=\"selectedOptions.length === 0 && selectedOption === ''\"\n            class=\"btn btn-white-border-gray action-button\"><i\n      class=\"fa fa-filter btn-icon\"></i>Filtern\n    </button>\n  </div>\n</mat-menu>\n", styles: [".filter-container{display:flex;flex-direction:column;padding:8px 12px}.filter-button{padding:8px 20px;margin:8px 12px 12px 8px}.filter-icon{margin-right:4px;vertical-align:middle}.menu-opened{background-color:var(--engo-green);color:var(--engo-white);border-color:var(--engo-white)}.action-button{margin:20px 12px 12px}.save-button-container{display:flex;justify-content:right;margin-right:12px;flex-wrap:wrap}/deep/ .mat-mdc-menu-panel{max-width:412px!important}/deep/ .mat-mdc-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-thumb{background-color:var(--engo-green)!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "directive", type: i2.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "directive", type: i3.MatBadge, selector: "[matBadge]", inputs: ["matBadgeDisabled", "matBadgeColor", "matBadgeOverlap", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "component", type: i4.Dropdown, selector: "p-dropdown", inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "directive", type: i5.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "directive", type: i2$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i7.MultiSelect, selector: "p-multiSelect", inputs: ["id", "ariaLabel", "style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectAll", "focusOnHover", "filterFields", "selectOnFocus", "autoOptionFocus"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove", "onSelectAllChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-filter-by-list-menu', template: "<button #filtertrigger=\"matMenuTrigger\" [class.menu-opened]=\"filtertrigger.menuOpen\"\n        [matBadge]=\"!multiple && filteredOption !== '' ? 1 : filteredOptions.length === 0 ? undefined : filteredOptions.length\"\n        [matMenuTriggerFor]=\"filterMenu\"\n        class=\"btn btn-white-border-gray filter-button\">\n  <i class=\"fa-solid fa-filter filter-icon\"></i>{{label}}\n</button>\n<mat-menu #filterMenu>\n  <div (click)=\"$event.stopPropagation(); $event.preventDefault\" class=\"filter-container\">\n    <div class=\"multiple-filter\" *ngIf=\"multiple\">\n      <p-multiSelect [options]=\"options\" appendTo=\"body\" (onChange)=\"onSelectChange($event)\" [placeholder]=\"label\" [filter]=\"true\" filterBy=\"label\" [showClear]=\"false\" [(ngModel)]=\"selectedOptionsModel\" [defaultLabel]=\"label\" optionLabel=\"label\"\n                     class=\"multiselect-custom\">\n        <ng-template let-value pTemplate=\"selectedItems\">\n          <div class=\"country-item country-item-value\" *ngFor=\"let option of selectedOptionsModel\">\n            <div>{{option.label}}</div>\n          </div>\n          <div *ngIf=\"!selectedOptionsModel || selectedOptionsModel.length === 0\" class=\"country-placeholder\">\n            {{label}}\n          </div>\n        </ng-template>\n        <ng-template let-each pTemplate=\"item\">\n          <div class=\"country-item\">\n            <div>{{each.label}}</div>\n          </div>\n        </ng-template>\n      </p-multiSelect>\n    </div>\n    <div class=\"single-filter\" *ngIf=\"!multiple\">\n      <p-dropdown (onChange)=\"onSelectChange($event)\" appendTo=\"body\" [(ngModel)]=\"selectedOptionModel\" [filter]=\"true\" [options]=\"options\" [showClear]=\"false\" filterBy=\"label\" optionLabel=\"label\" [placeholder]=\"label\">\n        <ng-template pTemplate=\"selectedItem\">\n          <div *ngIf=\"!!selectedOptionModel\">\n            <div>{{ selectedOptionModel.label }}</div>\n          </div>\n        </ng-template>\n        <ng-template let-each pTemplate=\"item\">\n          <div>\n            <div>{{ each.label }}</div>\n          </div>\n        </ng-template>\n      </p-dropdown>\n    </div>\n  </div>\n  <div class=\"save-button-container\">\n    <button (click)=\"clear()\" class=\"btn btn-white-border-gray action-button\"><i class=\"fa fa-ban btn-icon\"></i>Filter\n      l\u00F6schen\n    </button>\n    <button (click)=\"emit()\" [class.btn-disabled]=\"selectedOptions.length === 0 && selectedOption === ''\"\n            [disabled]=\"selectedOptions.length === 0 && selectedOption === ''\"\n            class=\"btn btn-white-border-gray action-button\"><i\n      class=\"fa fa-filter btn-icon\"></i>Filtern\n    </button>\n  </div>\n</mat-menu>\n", styles: [".filter-container{display:flex;flex-direction:column;padding:8px 12px}.filter-button{padding:8px 20px;margin:8px 12px 12px 8px}.filter-icon{margin-right:4px;vertical-align:middle}.menu-opened{background-color:var(--engo-green);color:var(--engo-white);border-color:var(--engo-white)}.action-button{margin:20px 12px 12px}.save-button-container{display:flex;justify-content:right;margin-right:12px;flex-wrap:wrap}/deep/ .mat-mdc-menu-panel{max-width:412px!important}/deep/ .mat-mdc-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-thumb{background-color:var(--engo-green)!important}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input
            }], label: [{
                type: Input
            }], multiple: [{
                type: Input
            }], filterStatusEmitter: [{
                type: Output
            }] } });

class UikTableFilterByListMenuModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuModule, declarations: [UikTableFilterByListMenuComponent], imports: [CommonModule,
            MatMenuModule,
            MatSelectModule,
            MatBadgeModule,
            DropdownModule,
            FormsModule,
            MultiSelectModule], exports: [UikTableFilterByListMenuComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuModule, imports: [CommonModule,
            MatMenuModule,
            MatSelectModule,
            MatBadgeModule,
            DropdownModule,
            FormsModule,
            MultiSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableFilterByListMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableFilterByListMenuComponent
                    ],
                    exports: [
                        UikTableFilterByListMenuComponent
                    ],
                    imports: [
                        CommonModule,
                        MatMenuModule,
                        MatSelectModule,
                        MatBadgeModule,
                        DropdownModule,
                        FormsModule,
                        MultiSelectModule
                    ]
                }]
        }] });

class UikRoutingLoadingBarComponent {
    constructor(router) {
        this.router = router;
        this.loading = false;
    }
    ngOnInit() {
        this.router.events.subscribe((event) => {
            switch (true) {
                case event instanceof NavigationStart: {
                    this.loading = true;
                    break;
                }
                case event instanceof NavigationEnd: {
                    this.loading = false;
                    break;
                }
                case event instanceof NavigationCancel: {
                    this.loading = false;
                    break;
                }
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarComponent, deps: [{ token: i1$2.Router }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikRoutingLoadingBarComponent, selector: "engo-uik-routing-loading-bar", ngImport: i0, template: "<mat-progress-bar *ngIf=\"loading\" [mode]=\"'indeterminate'\"></mat-progress-bar>\n", styles: [".mat-mdc-progress-bar{width:102%!important;margin-left:-1%!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3$1.MatProgressBar, selector: "mat-progress-bar", inputs: ["color", "value", "bufferValue", "mode"], outputs: ["animationEnd"], exportAs: ["matProgressBar"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-routing-loading-bar', template: "<mat-progress-bar *ngIf=\"loading\" [mode]=\"'indeterminate'\"></mat-progress-bar>\n", styles: [".mat-mdc-progress-bar{width:102%!important;margin-left:-1%!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$2.Router }]; } });

class UikRoutingLoadingBarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarModule, declarations: [UikRoutingLoadingBarComponent], imports: [CommonModule,
            MatProgressBarModule], exports: [UikRoutingLoadingBarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarModule, imports: [CommonModule,
            MatProgressBarModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikRoutingLoadingBarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikRoutingLoadingBarComponent
                    ],
                    exports: [
                        UikRoutingLoadingBarComponent
                    ],
                    imports: [
                        CommonModule,
                        MatProgressBarModule
                    ]
                }]
        }] });

class UikStatusLabelComponent {
    constructor() {
    }
    ngOnInit() {
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikStatusLabelComponent, selector: "engo-uik-status-label", inputs: { labelData: "labelData" }, ngImport: i0, template: "<label class=\"status-label\">{{labelData?.prelabel}} <span [ngClass]=\"'label-' + labelData?.labelColor\"\n                                                          class=\"label\">{{labelData?.labelValue}}</span></label>\n", styles: [".label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label-green{background-color:#5cb85c}.label-red{background-color:#d9534f}.label-yellow{background-color:#d29c00}.label-gray{background-color:#0e0e0e54}.label-blue{background-color:#015b7d}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-status-label', template: "<label class=\"status-label\">{{labelData?.prelabel}} <span [ngClass]=\"'label-' + labelData?.labelColor\"\n                                                          class=\"label\">{{labelData?.labelValue}}</span></label>\n", styles: [".label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label-green{background-color:#5cb85c}.label-red{background-color:#d9534f}.label-yellow{background-color:#d29c00}.label-gray{background-color:#0e0e0e54}.label-blue{background-color:#015b7d}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { labelData: [{
                type: Input
            }] } });

class UikStatusLabelModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelModule, declarations: [UikStatusLabelComponent], imports: [CommonModule], exports: [UikStatusLabelComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikStatusLabelModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikStatusLabelComponent
                    ],
                    exports: [
                        UikStatusLabelComponent
                    ],
                    imports: [
                        CommonModule
                    ]
                }]
        }] });

class UikFormLegendComponent {
    constructor() {
        this.legendElements = ['* Pflichtfeld'];
    }
    ngOnInit() {
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikFormLegendComponent, selector: "engo-uik-form-legend", inputs: { legendElements: "legendElements" }, ngImport: i0, template: "<div id=\"legend\">\n  <ng-container *ngFor=\"let legendElement of legendElements\">\n    <p>{{legendElement}}</p>\n  </ng-container>\n</div>\n", styles: ["#legend{float:right}#legend p{font-size:10px!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-form-legend', template: "<div id=\"legend\">\n  <ng-container *ngFor=\"let legendElement of legendElements\">\n    <p>{{legendElement}}</p>\n  </ng-container>\n</div>\n", styles: ["#legend{float:right}#legend p{font-size:10px!important}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { legendElements: [{
                type: Input
            }] } });

class UikFormLegendModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendModule, declarations: [UikFormLegendComponent], imports: [CommonModule], exports: [UikFormLegendComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormLegendModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikFormLegendComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        UikFormLegendComponent
                    ]
                }]
        }] });

class UikFormsComponent {
    constructor() {
        this.formStructure = [];
        this.submitData = new EventEmitter();
        this.inputLiveData = new EventEmitter();
        this.selectValue = new EventEmitter();
        this.selectSearchValue = new EventEmitter();
        this.validationResult = new EventEmitter();
        this.changes = 0;
        this.checkboxValue = false;
        this.inputNgModel = [];
        this.validationResults = [];
        this.selectSearchNgModelObject = [];
    }
    ngOnInit() {
        this.formStructure.forEach((element, index) => {
            if (element.inputContent && element.inputContent.inputValueDefault) {
                this.inputNgModel[index] = element.inputContent.inputValueDefault;
            }
            if (element.selectSearchContent) {
                this.selectSearchNgModelObject[element.selectSearchContent.selectIndex] = null;
            }
        });
    }
    ngAfterViewInit() {
        this.formStructure.forEach((element, index) => {
            if (element.inputContent) {
                if (element.inputContent.inputValueDefault) {
                    const htmlElement = document.getElementById('inp-' + index);
                    if (htmlElement && !_.isEmpty(htmlElement.value)) {
                        htmlElement.value = element.inputContent.inputValueDefault;
                    }
                }
            }
        });
    }
    onSubmit(form) {
        this.checkValidation();
        if (this.changes !== 0) {
            this.changes = 0;
            this.previousFormData = form.value;
            this.submitData.emit(form);
        }
    }
    onChange(form) {
        this.checkValidation();
        this.inputLiveData?.emit(form);
    }
    getSelectedValue(select) {
        this.selectValue.emit(select.value);
    }
    getSelectSearchValue(index) {
        this.changes++;
        this.selectSearchValue.emit({
            index,
            value: this.selectSearchNgModelObject[index]
        });
    }
    checkboxChangeEmit(event) {
        this.checkboxValue = event.checked;
    }
    checkValidation() {
        const results = [];
        this.formStructure.forEach((field, index) => {
            if (field.type === 'input' && field.inputContent) {
                const currentInput = this.inputNgModel[index];
                const result = {
                    valid: true,
                    value: String(currentInput),
                    errorMessage: []
                };
                if (field.inputContent.inputNgModelRequired && _.isEmpty(currentInput)) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextRequired) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextRequired);
                    }
                    else {
                        result.errorMessage.push('Das Feld ist ein Pflichtfeld.');
                    }
                }
                if (field.inputContent.inputNgModelMinLength && currentInput.length < field.inputContent.inputNgModelMinLength) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextLength) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextLength);
                    }
                    else {
                        result.errorMessage?.push('Der Wert entspricht nicht der Länge von mindestens ' + field.inputContent.inputNgModelMinLength + ' und maximal ' + field.inputContent.inputNgModelMaxLength + ' Zeichen.');
                    }
                }
                if (field.inputContent.inputNgModelMaxLength && currentInput.length > field.inputContent.inputNgModelMaxLength) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextLength) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextLength);
                    }
                    else {
                        result.errorMessage?.push('Der Wert entspricht nicht der Länge von mindestens ' + field.inputContent.inputNgModelMinLength + ' und maximal ' + field.inputContent.inputNgModelMaxLength + ' Zeichen.');
                    }
                }
                if (field.inputContent.inputValidationPattern && !new RegExp(field.inputContent.inputValidationPattern).test(currentInput)) {
                    result.valid = false;
                    if (field.inputContent.inputAlerting?.alertErrorTextPattern) {
                        result.errorMessage.push(field.inputContent.inputAlerting?.alertErrorTextPattern);
                    }
                    else {
                        result.errorMessage.push('Der Wert entspricht nicht der geforderten Struktur.');
                    }
                }
                results[index] = result;
            }
        });
        this.validationResults = results;
        this.validationResult.emit(this.validationResults);
        return results;
    }
    hasChanged(formfield, current) {
        if (formfield.inputName) {
            const previous = this.previousFormData ? this.previousFormData[formfield.inputName] : null;
            if (previous !== current) {
                this.changes++;
            }
            else {
                this.changes = 0;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikFormsComponent, selector: "engo-uik-forms", inputs: { formStructure: "formStructure" }, outputs: { submitData: "submitData", inputLiveData: "inputLiveData", selectValue: "selectValue", selectSearchValue: "selectSearchValue", validationResult: "validationResult" }, ngImport: i0, template: "<form #form=\"ngForm\" (change)=\"onChange(form)\" (ngSubmit)=\"onSubmit(form)\" class=\"form\" ngNativeValidate>\n\n  <ng-container *ngFor=\"let element of formStructure; let i = index\">\n    <div *ngIf=\"element.type === 'select' && element.selectContent\" [id]=\"'form-field-select'\">\n      <div class=\"formelement\">\n        <mat-form-field appearance=\"fill\" class=\"selectbox\">\n          <mat-label>{{element.selectContent.selectLabel}}</mat-label>\n          <mat-select (selectionChange)=\"getSelectedValue($event); changes = changes + 1\">\n            <mat-option *ngFor=\"let selectElement of element.selectContent.selectOptionItems\"\n                        [value]=\"selectElement.selectOptionValue\"> {{selectElement.selectOptionLabel}} </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'select-search' && element.selectSearchContent\" [class]=\"'select-search'\"\n         [id]=\"'form-field-select-search'\">\n      <label class=\"select-search-label\">{{element.selectSearchContent.label}}</label>\n      <ng-select (change)=\"getSelectSearchValue(element.selectSearchContent.selectIndex)\"\n                 [(ngModel)]=\"selectSearchNgModelObject[element.selectSearchContent.selectIndex]\"\n                 [bindLabel]=\"element.selectSearchContent.bindLabel\"\n                 [bindValue]=\"element.selectSearchContent.bindValue\"\n                 [items]=\"element.selectSearchContent.items | async\"\n                 [multiple]=\"element.selectSearchContent.multiple\"\n                 [placeholder]=\"element.selectSearchContent.placeholder\">\n      </ng-select>\n    </div>\n    <div *ngIf=\"element.type === 'input' && element.inputContent\" [class]=\"'form-field-input'\">\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === false\"\n           [class]=\"'form-field form-field-input form-field-input-novalidation'\">\n        <label [for]=\"'inp-novalidation-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event)\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-novalidation-' + i\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\"\n                 [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\">\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n      </div>\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === true\"\n           [class]=\"'form-field form-field-input form-field-input-validation'\">\n        <label [for]=\"'inp-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event); checkValidation()\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-' + i\"\n                 [maxlength]=\"element.inputContent.inputNgModelMaxLength ? element.inputContent.inputNgModelMaxLength : ''\"\n                 [minlength]=\"element.inputContent.inputNgModelMinLength ? element.inputContent.inputNgModelMinLength : ''\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\" [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\"\n                 required>\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n        <div *ngIf=\"!!validationResults[i]\">\n          <div *ngIf=\"validationResults[i].errorMessage.length > 0\">\n            <p *ngFor=\"let error of validationResults[i].errorMessage\" class=\"alert\">{{error}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'checkbox' && element.checkboxContent\" [class]=\"'form-field form-field-checkbox'\">\n      <input (change)=\"checkboxChangeEmit($event); changes = changes + 1\"\n             [checked]=\"element.checkboxContent.checkboxCheckedState\"\n             [id]=\"element.checkboxContent.checkboxId ? element.checkboxContent.checkboxId : element.checkboxContent.checkboxName\" [name]=\"element.checkboxContent.checkboxName\" class=\"inp-cbx\"\n             ngModel\n             style=\"display: none\" type=\"checkbox\"><label [for]=\"element.checkboxContent.checkboxName\"\n                                                                                         class=\"cbx\"><span\n      id=\"span-cbx-checkbox\"><svg height=\"10px\" viewbox=\"0 0 12 10\" width=\"12px\">\n                <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\n            </svg></span><span class=\"label\"\n                               id=\"span-cbx-label\">{{element.checkboxContent.checkboxLabel}}</span></label>\n\n    </div>\n\n    <div *ngIf=\"element.type === 'submit' && element.submitContent\" [class]=\"'form-field form-field-submit'\">\n      <button [class]=\"element.submitContent.submitDisabled || !form.valid || changes === 0 ? 'btn btn-disabled' : 'btn btn-submit'\"\n              [disabled]=\"!(element.submitContent) || element.submitContent.submitDisabled || !form.valid || changes === 0\"\n              type=\"submit\"\n              value=\"Send\"><i\n        [class]=\"!(element.submitContent) || element.submitContent.submitIconFaClass ? element.submitContent.submitIconFaClass : 'fa fa-cog'\"\n        class=\"btn-icon\"></i>{{element.submitContent.submitLabel}}</button>\n    </div>\n\n    <div *ngIf=\"element.type === 'header' && element.headerContent\" class=\"form-field form-field-header\">\n      <h1 *ngIf=\"element.headerContent.headerFormat === 'h1'\">{{element.headerContent.headerTitle}}</h1>\n      <h2 *ngIf=\"element.headerContent.headerFormat === 'h2'\">{{element.headerContent.headerTitle}}</h2>\n      <h3 *ngIf=\"element.headerContent.headerFormat === 'h3'\">{{element.headerContent.headerTitle}}</h3>\n    </div>\n  </ng-container>\n</form>\n", styles: [".select-search{margin-top:12px;margin-bottom:12px}.select-search-label{color:#00000080}mat-form-field{width:100%;width:-webkit-fill-available;width:available}.alert{font-size:11pt!important}.form-field{margin-bottom:8px}.form-field-input{display:grid}.form-field-checkbox{margin-top:16px;margin-bottom:16px}.form{height:20%;display:inline-grid;font-family:Open Sans,sans-serif!important;font-weight:500!important;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;box-sizing:border-box;width:100%;max-width:500px}.inp{position:relative;margin:auto;width:100%;border-radius:3px;overflow:hidden}.inp .label{position:absolute;top:20px;left:4px;font-size:14px;color:#00000080;font-weight:500;transform-origin:0 0;transform:translateZ(0);transition:all .2s ease;pointer-events:none}.inp .focus-bg{position:absolute;top:0;left:0;width:100%;height:100%;background:#0000000d;z-index:-1;transform:scaleX(0);transform-origin:left}.inp input{appearance:none;width:100%;border:0;font-family:Open Sans,sans-serif!important;font-weight:500!important;padding:32px 4px 16px;height:28px;font-size:12px;font-weight:400;background:#fff0;box-shadow:inset 0 -1px #0000004d;color:#000;transition:all .15s ease}.inp input:hover{background:#c3c3c3;box-shadow:inset 0 -1px #00000080}.inp input:not(:placeholder-shown)+.label{color:#00000080;transform:translate3d(0,-12px,0) scale(.75)}.inp input:focus{background:#0000000d;outline:none;box-shadow:inset 0 -2px #00823e}.inp input:focus+.label{color:#01592d;transform:translate3d(0,-12px,0) scale(.75)}::ng-deep .snackbar{background:#01592d}::ng-deep .snackbar-error{background:#a71b03!important}.cbx{margin:auto;-webkit-user-select:none;user-select:none;cursor:pointer}.cbx span{display:inline-block;vertical-align:middle;transform:translateZ(0)}.cbx span:first-child{position:relative;width:18px;height:18px;border-radius:3px;transform:scale(1);vertical-align:middle;border:1px solid #9098a9;transition:all .2s ease}.cbx span:first-child svg{position:absolute;top:3px;left:2px;fill:none;stroke:#fff;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:16px;stroke-dashoffset:16px;transition:all .3s ease;transition-delay:.1s;transform:translateZ(0)}.cbx span:last-child{padding-left:8px}.cbx:hover span:first-child{border-color:#00823e}.inp-cbx:checked+.cbx span:first-child{background:#00823e;border-color:#949494;animation:wave .4s ease}.inp-cbx:checked+.cbx span:first-child svg{stroke-dashoffset:0}.inp-cbx:checked+.cbx span:first-child:before{transform:scale(3.5);opacity:0;transition:all .6s ease}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2$2.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { kind: "directive", type: i2$2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i2$2.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i2$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2$2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3$2.MatLabel, selector: "mat-label" }, { kind: "component", type: i4$1.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "panelWidth", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i5$1.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-forms', template: "<form #form=\"ngForm\" (change)=\"onChange(form)\" (ngSubmit)=\"onSubmit(form)\" class=\"form\" ngNativeValidate>\n\n  <ng-container *ngFor=\"let element of formStructure; let i = index\">\n    <div *ngIf=\"element.type === 'select' && element.selectContent\" [id]=\"'form-field-select'\">\n      <div class=\"formelement\">\n        <mat-form-field appearance=\"fill\" class=\"selectbox\">\n          <mat-label>{{element.selectContent.selectLabel}}</mat-label>\n          <mat-select (selectionChange)=\"getSelectedValue($event); changes = changes + 1\">\n            <mat-option *ngFor=\"let selectElement of element.selectContent.selectOptionItems\"\n                        [value]=\"selectElement.selectOptionValue\"> {{selectElement.selectOptionLabel}} </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'select-search' && element.selectSearchContent\" [class]=\"'select-search'\"\n         [id]=\"'form-field-select-search'\">\n      <label class=\"select-search-label\">{{element.selectSearchContent.label}}</label>\n      <ng-select (change)=\"getSelectSearchValue(element.selectSearchContent.selectIndex)\"\n                 [(ngModel)]=\"selectSearchNgModelObject[element.selectSearchContent.selectIndex]\"\n                 [bindLabel]=\"element.selectSearchContent.bindLabel\"\n                 [bindValue]=\"element.selectSearchContent.bindValue\"\n                 [items]=\"element.selectSearchContent.items | async\"\n                 [multiple]=\"element.selectSearchContent.multiple\"\n                 [placeholder]=\"element.selectSearchContent.placeholder\">\n      </ng-select>\n    </div>\n    <div *ngIf=\"element.type === 'input' && element.inputContent\" [class]=\"'form-field-input'\">\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === false\"\n           [class]=\"'form-field form-field-input form-field-input-novalidation'\">\n        <label [for]=\"'inp-novalidation-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event)\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-novalidation-' + i\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\"\n                 [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\">\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n      </div>\n      <div *ngIf=\"element.inputContent.inputNgModelRequired === true\"\n           [class]=\"'form-field form-field-input form-field-input-validation'\">\n        <label [for]=\"'inp-' + i\" class=\"inp\">\n          <input (ngModelChange)=\"hasChanged(element.inputContent, $event); checkValidation()\"\n                 [(ngModel)]=\"inputNgModel[i]\"\n                 [class]=\"'inp'\"\n                 [disabled]=\"element.inputContent.inputDisabled ? element.inputContent.inputDisabled : false\"\n                 [id]=\"'inp-' + i\"\n                 [maxlength]=\"element.inputContent.inputNgModelMaxLength ? element.inputContent.inputNgModelMaxLength : ''\"\n                 [minlength]=\"element.inputContent.inputNgModelMinLength ? element.inputContent.inputNgModelMinLength : ''\"\n                 [name]=\"element.inputContent.inputName\"\n                 [pattern]=\"!!element.inputContent.inputValidationPattern ? element.inputContent.inputValidationPattern : '.*'\" [type]=\"element.inputContent.inputType\"\n                 [value]=\"element.inputContent.inputValueDefault\"\n                 ngModel\n                 placeholder=\"&nbsp;\"\n                 required>\n          <span class=\"label\">{{element.inputContent.inputLabel}}</span>\n          <span class=\"focus-bg\"></span>\n        </label>\n        <div *ngIf=\"!!validationResults[i]\">\n          <div *ngIf=\"validationResults[i].errorMessage.length > 0\">\n            <p *ngFor=\"let error of validationResults[i].errorMessage\" class=\"alert\">{{error}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"element.type === 'checkbox' && element.checkboxContent\" [class]=\"'form-field form-field-checkbox'\">\n      <input (change)=\"checkboxChangeEmit($event); changes = changes + 1\"\n             [checked]=\"element.checkboxContent.checkboxCheckedState\"\n             [id]=\"element.checkboxContent.checkboxId ? element.checkboxContent.checkboxId : element.checkboxContent.checkboxName\" [name]=\"element.checkboxContent.checkboxName\" class=\"inp-cbx\"\n             ngModel\n             style=\"display: none\" type=\"checkbox\"><label [for]=\"element.checkboxContent.checkboxName\"\n                                                                                         class=\"cbx\"><span\n      id=\"span-cbx-checkbox\"><svg height=\"10px\" viewbox=\"0 0 12 10\" width=\"12px\">\n                <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\n            </svg></span><span class=\"label\"\n                               id=\"span-cbx-label\">{{element.checkboxContent.checkboxLabel}}</span></label>\n\n    </div>\n\n    <div *ngIf=\"element.type === 'submit' && element.submitContent\" [class]=\"'form-field form-field-submit'\">\n      <button [class]=\"element.submitContent.submitDisabled || !form.valid || changes === 0 ? 'btn btn-disabled' : 'btn btn-submit'\"\n              [disabled]=\"!(element.submitContent) || element.submitContent.submitDisabled || !form.valid || changes === 0\"\n              type=\"submit\"\n              value=\"Send\"><i\n        [class]=\"!(element.submitContent) || element.submitContent.submitIconFaClass ? element.submitContent.submitIconFaClass : 'fa fa-cog'\"\n        class=\"btn-icon\"></i>{{element.submitContent.submitLabel}}</button>\n    </div>\n\n    <div *ngIf=\"element.type === 'header' && element.headerContent\" class=\"form-field form-field-header\">\n      <h1 *ngIf=\"element.headerContent.headerFormat === 'h1'\">{{element.headerContent.headerTitle}}</h1>\n      <h2 *ngIf=\"element.headerContent.headerFormat === 'h2'\">{{element.headerContent.headerTitle}}</h2>\n      <h3 *ngIf=\"element.headerContent.headerFormat === 'h3'\">{{element.headerContent.headerTitle}}</h3>\n    </div>\n  </ng-container>\n</form>\n", styles: [".select-search{margin-top:12px;margin-bottom:12px}.select-search-label{color:#00000080}mat-form-field{width:100%;width:-webkit-fill-available;width:available}.alert{font-size:11pt!important}.form-field{margin-bottom:8px}.form-field-input{display:grid}.form-field-checkbox{margin-top:16px;margin-bottom:16px}.form{height:20%;display:inline-grid;font-family:Open Sans,sans-serif!important;font-weight:500!important;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;box-sizing:border-box;width:100%;max-width:500px}.inp{position:relative;margin:auto;width:100%;border-radius:3px;overflow:hidden}.inp .label{position:absolute;top:20px;left:4px;font-size:14px;color:#00000080;font-weight:500;transform-origin:0 0;transform:translateZ(0);transition:all .2s ease;pointer-events:none}.inp .focus-bg{position:absolute;top:0;left:0;width:100%;height:100%;background:#0000000d;z-index:-1;transform:scaleX(0);transform-origin:left}.inp input{appearance:none;width:100%;border:0;font-family:Open Sans,sans-serif!important;font-weight:500!important;padding:32px 4px 16px;height:28px;font-size:12px;font-weight:400;background:#fff0;box-shadow:inset 0 -1px #0000004d;color:#000;transition:all .15s ease}.inp input:hover{background:#c3c3c3;box-shadow:inset 0 -1px #00000080}.inp input:not(:placeholder-shown)+.label{color:#00000080;transform:translate3d(0,-12px,0) scale(.75)}.inp input:focus{background:#0000000d;outline:none;box-shadow:inset 0 -2px #00823e}.inp input:focus+.label{color:#01592d;transform:translate3d(0,-12px,0) scale(.75)}::ng-deep .snackbar{background:#01592d}::ng-deep .snackbar-error{background:#a71b03!important}.cbx{margin:auto;-webkit-user-select:none;user-select:none;cursor:pointer}.cbx span{display:inline-block;vertical-align:middle;transform:translateZ(0)}.cbx span:first-child{position:relative;width:18px;height:18px;border-radius:3px;transform:scale(1);vertical-align:middle;border:1px solid #9098a9;transition:all .2s ease}.cbx span:first-child svg{position:absolute;top:3px;left:2px;fill:none;stroke:#fff;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:16px;stroke-dashoffset:16px;transition:all .3s ease;transition-delay:.1s;transform:translateZ(0)}.cbx span:last-child{padding-left:8px}.cbx:hover span:first-child{border-color:#00823e}.inp-cbx:checked+.cbx span:first-child{background:#00823e;border-color:#949494;animation:wave .4s ease}.inp-cbx:checked+.cbx span:first-child svg{stroke-dashoffset:0}.inp-cbx:checked+.cbx span:first-child:before{transform:scale(3.5);opacity:0;transition:all .6s ease}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { formStructure: [{
                type: Input
            }], submitData: [{
                type: Output
            }], inputLiveData: [{
                type: Output
            }], selectValue: [{
                type: Output
            }], selectSearchValue: [{
                type: Output
            }], validationResult: [{
                type: Output
            }] } });

class UikFormsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikFormsModule, declarations: [UikFormsComponent], imports: [CommonModule,
            FormsModule,
            MatFormFieldModule,
            MatSelectModule,
            ReactiveFormsModule,
            NgSelectModule], exports: [UikFormsComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsModule, imports: [CommonModule,
            FormsModule,
            MatFormFieldModule,
            MatSelectModule,
            ReactiveFormsModule,
            NgSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikFormsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikFormsComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MatFormFieldModule,
                        MatSelectModule,
                        ReactiveFormsModule,
                        NgSelectModule
                    ],
                    exports: [
                        UikFormsComponent
                    ]
                }]
        }] });

class UikTableCheckboxComponent {
    constructor() {
        this.columns = undefined;
        this.showStatusLabel = true;
        this.dataSource = new MatTableDataSource();
        this.enablePagination = false;
        this.enableSort = false;
        this.enableFiltering = false;
        this.enableMultipleChecked = true;
        this.checkboxClickedMultipleEmitter = new EventEmitter();
        this.checkboxClickedSingleEmitter = new EventEmitter();
        this.displayedColumns = [];
        this.checkboxClickedMultipleArray = [];
        this.checkboxClickedSingleArray = undefined;
        this.pageIndex = 0;
        this.pageSize = 0;
        this.correctIndex = 0;
    }
    ngOnInit() {
        this.renderDisplayedColumns();
    }
    ngAfterViewInit() {
        this.renderSorting();
        this.renderPagination();
        this.renderStatusLabel();
    }
    ngOnChanges(changes) {
        if (this.table) {
            if (changes["dataSource"]) {
                this.table.dataSource = this.dataSource;
            }
            this.table.renderRows();
            this.renderSorting();
            this.renderPagination();
            this.renderStatusLabel();
        }
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        if (this.dataSource.paginator) {
            this.dataSource.paginator.firstPage();
        }
        if (this.enableMultipleChecked === false) {
            this.checkboxClickedSingleArray = { elementId: -1 };
            this.emitCheckboxClickedSingle();
        }
        if (this.enableMultipleChecked === true) {
            this.checkboxClickedMultipleArray = [];
            this.emitCheckboxClickedMultiple();
        }
    }
    getSelectedRow(event, index) {
        if (this.paginator && this.enablePagination === true) {
            this.pageIndex = this.paginator.pageIndex;
            this.pageSize = this.paginator.pageSize;
            this.correctIndex = this.pageIndex * this.pageSize;
            index = index + this.correctIndex;
        }
        const elementId = this.dataSource.filteredData[index].id;
        if (event.checked === true) {
            if (this.enableMultipleChecked === false) {
                this.checkboxClickedSingleArray = { elementId };
                this.emitCheckboxClickedSingle();
            }
            if (this.enableMultipleChecked === true) {
                this.checkboxClickedMultipleArray.push({ elementId });
                this.emitCheckboxClickedMultiple();
            }
        }
        if (event.checked === false) {
            if (this.enableMultipleChecked === false) {
                this.checkboxClickedSingleArray = { elementId: -1 };
                this.emitCheckboxClickedSingle();
            }
            if (this.enableMultipleChecked === true) {
                const arrayIndex = this.checkboxClickedMultipleArray.findIndex(e => e.elementId === elementId);
                this.checkboxClickedMultipleArray.splice(arrayIndex, 1);
                this.emitCheckboxClickedMultiple();
            }
        }
    }
    onChangePagination() {
        if (this.enableMultipleChecked === false) {
            this.checkboxClickedSingleArray = { elementId: -1 };
            this.emitCheckboxClickedSingle();
        }
        if (this.enableMultipleChecked === true) {
            this.checkboxClickedMultipleArray = [];
            this.emitCheckboxClickedMultiple();
        }
    }
    checkSelectedMultipleInArray(id) {
        return this.checkboxClickedMultipleArray.findIndex(element => element.elementId === id);
    }
    emitCheckboxClickedMultiple() {
        this.checkboxClickedMultipleEmitter.emit(this.checkboxClickedMultipleArray);
    }
    emitCheckboxClickedSingle() {
        this.checkboxClickedSingleEmitter.emit(this.checkboxClickedSingleArray);
    }
    renderDisplayedColumns() {
        if (this.columns) {
            this.displayedColumns.push('checkboxColumn');
            for (const column of this.columns) {
                this.displayedColumns.push(column.name);
            }
        }
    }
    renderStatusLabel() {
        if (this.showStatusLabel) {
            if (!this.displayedColumns.includes('statusLabelColumn')) {
                this.displayedColumns.push('statusLabelColumn');
            }
            this.dataSource.data.forEach(element => element.statusLabelColumn = element.statusLabel.labelValue);
        }
    }
    renderSorting() {
        if (this.enableSort) {
            this.dataSource.sort = this.sort;
        }
    }
    renderPagination() {
        if (this.enablePagination) {
            this.dataSource.paginator = this.paginator;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableCheckboxComponent, selector: "engo-uik-table-checkbox", inputs: { columns: "columns", statusHeaderLabel: "statusHeaderLabel", showStatusLabel: "showStatusLabel", dataSource: "dataSource", enablePagination: "enablePagination", paginatorPageOptions: "paginatorPageOptions", enableSort: "enableSort", enableFiltering: "enableFiltering", enableMultipleChecked: "enableMultipleChecked" }, outputs: { checkboxClickedMultipleEmitter: "checkboxClickedMultipleEmitter", checkboxClickedSingleEmitter: "checkboxClickedSingleEmitter" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }, { propertyName: "table", first: true, predicate: MatTable, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n  <ng-container matColumnDef=\"checkboxColumn\">\n    <th *matHeaderCellDef mat-header-cell></th>\n    <td *matCellDef=\"let element; index as i;\" mat-cell>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\" *ngIf=\"enableMultipleChecked === true\"\n                    [checked]=\"checkSelectedMultipleInArray(element.id) !== -1\">\n      </mat-checkbox>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\"\n                    *ngIf=\"enableMultipleChecked === false\"\n                    [checked]=\"checkboxClickedSingleArray?.elementId === element.id\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let userdata; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator (page)=\"onChangePagination()\"\n               *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\" showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i3$3.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3$3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i4$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "component", type: i5$2.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex"], exportAs: ["matCheckbox"] }, { kind: "component", type: UikStatusLabelComponent, selector: "engo-uik-status-label", inputs: ["labelData"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-checkbox', template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n  <ng-container matColumnDef=\"checkboxColumn\">\n    <th *matHeaderCellDef mat-header-cell></th>\n    <td *matCellDef=\"let element; index as i;\" mat-cell>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\" *ngIf=\"enableMultipleChecked === true\"\n                    [checked]=\"checkSelectedMultipleInArray(element.id) !== -1\">\n      </mat-checkbox>\n      <mat-checkbox (change)=\"getSelectedRow($event, i)\"\n                    *ngIf=\"enableMultipleChecked === false\"\n                    [checked]=\"checkboxClickedSingleArray?.elementId === element.id\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let userdata; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator (page)=\"onChangePagination()\"\n               *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\" showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { columns: [{
                type: Input
            }], statusHeaderLabel: [{
                type: Input
            }], showStatusLabel: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], enablePagination: [{
                type: Input
            }], paginatorPageOptions: [{
                type: Input
            }], enableSort: [{
                type: Input
            }], enableFiltering: [{
                type: Input
            }], enableMultipleChecked: [{
                type: Input
            }], checkboxClickedMultipleEmitter: [{
                type: Output
            }], checkboxClickedSingleEmitter: [{
                type: Output
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], table: [{
                type: ViewChild,
                args: [MatTable]
            }] } });

class UikTableCheckboxModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxModule, declarations: [UikTableCheckboxComponent], imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            MatCheckboxModule,
            UikStatusLabelModule], exports: [UikTableCheckboxComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxModule, imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            MatCheckboxModule,
            UikStatusLabelModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableCheckboxComponent
                    ],
                    imports: [
                        CommonModule,
                        MatTableModule,
                        MatSortModule,
                        MatPaginatorModule,
                        MatCheckboxModule,
                        UikStatusLabelModule
                    ],
                    exports: [
                        UikTableCheckboxComponent
                    ]
                }]
        }] });

class UikTableEditmodeComponent {
    constructor() {
        this.columns = undefined;
        this.showStatusLabel = false;
        this.dataSource = new MatTableDataSource();
        this.enablePagination = false;
        this.enableSort = false;
        this.idColumnName = '';
        this.enableFiltering = false;
        this.saveEntryData = new EventEmitter();
        this.deleteEntryRowid = new EventEmitter();
        this.editRowId = new EventEmitter();
        this.callAction = new EventEmitter();
        this.displayedColumns = [];
        this.editMode = false;
        this.editModeIndex = null;
        this.pageIndex = 0;
        this.pageSize = 0;
        this.correctIndex = 0;
        this.change = 0;
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        this.renderDisplayedColumns();
        this.table.renderRows();
        this.renderSorting();
        this.renderPagination();
        this.renderStatusLabel();
    }
    ngOnChanges(changes) {
        if (this.table) {
            if (changes["dataSource"]) {
                this.table.dataSource = this.dataSource;
            }
            this.table.renderRows();
            this.renderSorting();
            this.renderPagination();
            this.renderStatusLabel();
        }
    }
    async enableEditMode(index) {
        if (this.hasPermissionWrite) {
            this.editMode = true;
            if (this.paginator && this.enablePagination) {
                this.pageIndex = this.paginator.pageIndex;
                this.pageSize = this.paginator.pageSize;
                this.correctIndex = this.pageIndex * this.pageSize;
                index = index + this.correctIndex;
            }
            const elementId = this.dataSource.filteredData[+index].id;
            if (this.enableFiltering && !!this.dataSource.filter) {
                const indexOfFiltered = this.dataSource.data.findIndex((e) => e.id === elementId);
                if (indexOfFiltered) {
                    index = indexOfFiltered;
                }
            }
            this.editModeIndex = index;
            this.newData = this.dataSource.filteredData[index];
        }
    }
    changeInputValue(backendName, index, backendPath) {
        if (backendPath) {
            this.newData[backendPath][backendName] = (document.getElementById(backendName + index)).value;
            this.change++;
        }
        else {
            this.newData[backendName] = (document.getElementById(backendName + index)).value;
            this.change++;
        }
    }
    emitSaveEntry() {
        if (this.hasPermissionWrite) {
            this.saveEntryData.emit(this.newData);
            this.editRowId.emit(this.editModeIndex);
            this.callAction.emit('save');
            this.editMode = false;
            this.change = 0;
        }
    }
    deleteEntry(index) {
        this.deleteEntryRowid.emit(this.getRowid(index));
        this.callAction.emit('delete');
        this.editMode = false;
        this.change = 0;
    }
    cancel() {
        this.editMode = false;
        window.location.reload();
    }
    onChangePagination(event) {
        this.editMode = false;
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        if (this.dataSource.paginator) {
            this.dataSource.paginator.firstPage();
        }
        this.editMode = false;
        this.editModeIndex = null;
    }
    getRowid(index) {
        let newDataRowId = !!this.dataSource.data[index].rowid ? this.dataSource.data[index].rowid : this.dataSource.data[index].id;
        const backendPathId = this.columns?.find((column) => column.name === this.idColumnName && column.backendPath);
        if (backendPathId && backendPathId.backendPath) {
            // @ts-ignore
            // tslint:disable-next-line:max-line-length
            newDataRowId = this.dataSource.data[index][backendPathId.backendPath][backendPathId.backendName] || this.dataSource.data[index][backendPathId.backendPath].id || this.dataSource.data[index][backendPathId.backendPath].rowid;
        }
        return newDataRowId;
    }
    renderDisplayedColumns() {
        if (this.columns) {
            for (const column of this.columns) {
                this.displayedColumns.push(column.name);
            }
            this.displayedColumns.push('edit', 'save', 'delete', 'cancel');
        }
    }
    renderStatusLabel() {
        if (this.showStatusLabel) {
            if (!this.displayedColumns.includes('statusLabelColumn')) {
                this.displayedColumns.push('statusLabelColumn');
            }
            this.dataSource.data.forEach(element => element.statusLabelColumn = element.statusLabel.labelValue);
        }
    }
    renderSorting() {
        if (this.enableSort) {
            this.dataSource.sort = this.sort;
        }
    }
    renderPagination() {
        if (this.enablePagination) {
            this.dataSource.paginator = this.paginator;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableEditmodeComponent, selector: "engo-uik-table-editmode", inputs: { columns: "columns", statusHeaderLabel: "statusHeaderLabel", showStatusLabel: "showStatusLabel", dataSource: "dataSource", enablePagination: "enablePagination", enableSort: "enableSort", hasPermissionWrite: "hasPermissionWrite", idColumnName: "idColumnName", enableFiltering: "enableFiltering" }, outputs: { saveEntryData: "saveEntryData", deleteEntryRowid: "deleteEntryRowid", editRowId: "editRowId", callAction: "callAction" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }, { propertyName: "table", first: true, predicate: MatTable, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"enableFiltering\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<div class=\"table-container\">\n  <table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n    <div *ngIf=\"enableSort\">\n      <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n        <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n        <td *matCellDef=\"let element; index as i\" class=\"table-column\" mat-cell>\n          <input (keyup)=\"changeInputValue(column.backendName, i, column.backendPath)\"\n                 *ngIf=\"!!column.backendPath && column.editable\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendPath.toString()][column.backendName]\"\n                 name={{column.name}}>\n          <input (keyup)=\"changeInputValue(column.backendName, i)\"\n                 *ngIf=\"column.backendPath === undefined && column.editable\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendName]\"\n                 name={{column.name}}>\n          <span\n            *ngIf=\"!column.editable && !!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n          <span *ngIf=\"!column.editable && column.backendPath === undefined\">{{element[column.backendName]}}</span>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"!enableSort\">\n      <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n        <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n        <td *matCellDef=\"let element; index as i\" class=\"table-column\" mat-cell>\n          <input (keyup)=\"changeInputValue(column.backendName, i, column.backendPath)\"\n                 *ngIf=\"!!column.backendPath\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendPath.toString()][column.backendName]\"\n                 name={{column.name}}>\n          <input (keyup)=\"changeInputValue(column.backendName, i)\" *ngIf=\"column.backendPath === undefined\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendName]\"\n                 name={{column.name}}>\n          <span\n            *ngIf=\"!column.editable && !!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n          <span *ngIf=\"!column.editable && column.backendPath === undefined\">{{element[column.backendName]}}</span>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </div>\n\n    <ng-container matColumnDef=\"edit\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-pen\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell><a (click)=\"enableEditMode(i)\"\n                                                            *ngIf=\"!editMode\"\n                                                            class=\"btn-icon-button table-row-action edit-action\">\n        <i class=\"fa fa-pen\"></i>\n      </a></td>\n    </ng-container>\n    <ng-container matColumnDef=\"cancel\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-window-close\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button\n          (click)=\"cancel()\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n          class=\"btn-icon-button btn-cancel\"><i class=\"fa fa-window-close\"></i></button>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"save\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-save\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button (click)=\"emitSaveEntry()\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n                [disabled]=\"change === 0\"\n                class=\"btn-icon-button\" id=\"saveBtn\" type=\"submit\"><i\n          [ngClass]=\"change === 0 ? 'inventory-button-disabled' : ''\" class=\"fa fa-save\"></i></button>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"delete\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-trash\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button\n          (click)=\"deleteEntry(i)\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n          class=\"btn-icon-button btn-cancel\"><i class=\"fa fa-trash\"></i></button>\n      </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let element; columns: displayedColumns;\" mat-row></tr>\n  </table>\n  <mat-paginator (page)=\"onChangePagination($event)\" *ngIf=\"enablePagination\" [pageSizeOptions]=\"[10, 25, 50, 100, 200]\"\n                 showFirstLastButtons></mat-paginator>\n</div>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}.table-container{overflow-x:scroll}.table-column{width:-webkit-fill-available;width:fill-available}input:disabled{background-color:transparent;border:none}.btn-cancel i{color:#4b4b4b}.btn-cancel i:hover{color:#01592d}.inventory-button-disabled{color:#7c7c7c69}.header-icons{margin-left:6px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i3$3.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3$3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i4$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "component", type: UikStatusLabelComponent, selector: "engo-uik-status-label", inputs: ["labelData"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table-editmode', template: "<div *ngIf=\"enableFiltering\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<div class=\"table-container\">\n  <table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n    <div *ngIf=\"enableSort\">\n      <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n        <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n        <td *matCellDef=\"let element; index as i\" class=\"table-column\" mat-cell>\n          <input (keyup)=\"changeInputValue(column.backendName, i, column.backendPath)\"\n                 *ngIf=\"!!column.backendPath && column.editable\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendPath.toString()][column.backendName]\"\n                 name={{column.name}}>\n          <input (keyup)=\"changeInputValue(column.backendName, i)\"\n                 *ngIf=\"column.backendPath === undefined && column.editable\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendName]\"\n                 name={{column.name}}>\n          <span\n            *ngIf=\"!column.editable && !!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n          <span *ngIf=\"!column.editable && column.backendPath === undefined\">{{element[column.backendName]}}</span>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"!enableSort\">\n      <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n        <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n        <td *matCellDef=\"let element; index as i\" class=\"table-column\" mat-cell>\n          <input (keyup)=\"changeInputValue(column.backendName, i, column.backendPath)\"\n                 *ngIf=\"!!column.backendPath\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendPath.toString()][column.backendName]\"\n                 name={{column.name}}>\n          <input (keyup)=\"changeInputValue(column.backendName, i)\" *ngIf=\"column.backendPath === undefined\"\n                 [disabled]=\"!editMode || (i + correctIndex) !== editModeIndex\"\n                 [id]=\"column.backendName + i\"\n                 [pattern]=\"!!!column.inputValidationPattern ? column.inputValidationPattern : ''\"\n                 [style]=\"column.styleInput\"\n                 [value]=\"element[column.backendName]\"\n                 name={{column.name}}>\n          <span\n            *ngIf=\"!column.editable && !!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n          <span *ngIf=\"!column.editable && column.backendPath === undefined\">{{element[column.backendName]}}</span>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n        <th *matHeaderCellDef mat-header-cell>{{statusHeaderLabel}}</th>\n        <td *matCellDef=\"let element; index as i\" mat-cell>\n          <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n        </td>\n      </ng-container>\n    </div>\n\n    <ng-container matColumnDef=\"edit\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-pen\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell><a (click)=\"enableEditMode(i)\"\n                                                            *ngIf=\"!editMode\"\n                                                            class=\"btn-icon-button table-row-action edit-action\">\n        <i class=\"fa fa-pen\"></i>\n      </a></td>\n    </ng-container>\n    <ng-container matColumnDef=\"cancel\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-window-close\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button\n          (click)=\"cancel()\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n          class=\"btn-icon-button btn-cancel\"><i class=\"fa fa-window-close\"></i></button>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"save\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-save\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button (click)=\"emitSaveEntry()\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n                [disabled]=\"change === 0\"\n                class=\"btn-icon-button\" id=\"saveBtn\" type=\"submit\"><i\n          [ngClass]=\"change === 0 ? 'inventory-button-disabled' : ''\" class=\"fa fa-save\"></i></button>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"delete\">\n      <th *matHeaderCellDef mat-header-cell><i class=\"header-icons fa fa-trash\"></i></th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <button\n          (click)=\"deleteEntry(i)\" *ngIf=\"editMode && editModeIndex === i + pageIndex * pageSize\"\n          class=\"btn-icon-button btn-cancel\"><i class=\"fa fa-trash\"></i></button>\n      </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let element; columns: displayedColumns;\" mat-row></tr>\n  </table>\n  <mat-paginator (page)=\"onChangePagination($event)\" *ngIf=\"enablePagination\" [pageSizeOptions]=\"[10, 25, 50, 100, 200]\"\n                 showFirstLastButtons></mat-paginator>\n</div>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}.table-container{overflow-x:scroll}.table-column{width:-webkit-fill-available;width:fill-available}input:disabled{background-color:transparent;border:none}.btn-cancel i{color:#4b4b4b}.btn-cancel i:hover{color:#01592d}.inventory-button-disabled{color:#7c7c7c69}.header-icons{margin-left:6px}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { columns: [{
                type: Input
            }], statusHeaderLabel: [{
                type: Input
            }], showStatusLabel: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], enablePagination: [{
                type: Input
            }], enableSort: [{
                type: Input
            }], hasPermissionWrite: [{
                type: Input
            }], idColumnName: [{
                type: Input
            }], enableFiltering: [{
                type: Input
            }], saveEntryData: [{
                type: Output
            }], deleteEntryRowid: [{
                type: Output
            }], editRowId: [{
                type: Output
            }], callAction: [{
                type: Output
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], table: [{
                type: ViewChild,
                args: [MatTable]
            }] } });

class UikTableEditmodeModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeModule, declarations: [UikTableEditmodeComponent], imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            UikStatusLabelModule], exports: [UikTableEditmodeComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeModule, imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            UikStatusLabelModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableEditmodeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikTableEditmodeComponent
                    ],
                    imports: [
                        CommonModule,
                        MatTableModule,
                        MatSortModule,
                        MatPaginatorModule,
                        UikStatusLabelModule
                    ],
                    exports: [
                        UikTableEditmodeComponent
                    ]
                }]
        }] });

class UikTableComponent {
    constructor() {
        this.columns = undefined;
        this.actionColumns = undefined;
        this.showStatusLabel = false;
        this.dataSource = new MatTableDataSource();
        this.enablePagination = false;
        this.enableSort = false;
        this.enableFiltering = false;
        this.actionButtonClicked = new EventEmitter();
        this.displayedColumns = [];
    }
    ngOnInit() {
        this.renderDisplayedColumns();
        this.renderActionColumns();
    }
    ngAfterViewInit() {
        this.renderSorting();
        this.renderPagination();
        this.renderStatusLabel();
    }
    ngOnChanges(changes) {
        if (this.table) {
            if (changes["dataSource"]) {
                this.table.dataSource = this.dataSource;
            }
            this.table.renderRows();
            this.renderSorting();
            this.renderPagination();
            this.renderStatusLabel();
        }
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        if (this.dataSource.paginator) {
            this.dataSource.paginator.firstPage();
        }
    }
    emitActionButtonClicked(buttonName, index) {
        // TODO: index korrigieren wie auch in checkbox Table [ITD-
        if (this.paginator && this.enablePagination === true) {
            const pageIndex = this.paginator.pageIndex;
            const pageSize = this.paginator.pageSize;
            const correctIndex = pageIndex * pageSize;
            index = index + correctIndex;
        }
        const elementId = this.dataSource.filteredData[+index].id;
        if (this.enableFiltering && !!this.dataSource.filter) {
            const indexOfFiltered = this.dataSource.data.findIndex((e) => e.id === elementId);
            if (indexOfFiltered) {
                index = indexOfFiltered.toString();
            }
        }
        const emit = {
            buttonName,
            index
        };
        this.actionButtonClicked.emit(emit);
    }
    renderDisplayedColumns() {
        if (this.columns) {
            for (const column of this.columns) {
                this.displayedColumns.push(column.name);
            }
        }
    }
    renderStatusLabel() {
        if (this.showStatusLabel) {
            if (!this.displayedColumns.includes('statusLabelColumn')) {
                this.displayedColumns.push('statusLabelColumn');
            }
            this.dataSource.data.forEach(element => element.statusLabelColumn = element.statusLabel.labelValue);
        }
    }
    renderActionColumns() {
        if (this.actionColumns) {
            for (const actionColumn of this.actionColumns) {
                this.displayedColumns.push(actionColumn.name);
            }
        }
    }
    renderSorting() {
        if (this.enableSort) {
            this.dataSource.sort = this.sort;
        }
    }
    renderPagination() {
        if (this.enablePagination) {
            this.dataSource.paginator = this.paginator;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikTableComponent, selector: "engo-uik-table", inputs: { columns: "columns", actionColumns: "actionColumns", statusHeaderLabel: "statusHeaderLabel", showStatusLabel: "showStatusLabel", dataSource: "dataSource", enablePagination: "enablePagination", paginatorPageOptions: "paginatorPageOptions", enableSort: "enableSort", enableFiltering: "enableFiltering" }, outputs: { actionButtonClicked: "actionButtonClicked" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }, { propertyName: "table", first: true, predicate: MatTable, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"actionColumns\">\n    <ng-container *ngFor=\"let column of actionColumns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <a (click)=\"emitActionButtonClicked(column.name, i)\" class=\"btn-icon-button action-button\">\n          <i (click)=\"emitActionButtonClicked(column.name, i)\" [id]=\"'callAction'\" [ngClass]=\"column.faIconName\"></i>\n        </a>\n      </td>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let element; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\"\n               showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}.action-button{cursor:pointer}.form{float:left}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i3$3.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3$3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i4$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "component", type: UikStatusLabelComponent, selector: "engo-uik-status-label", inputs: ["labelData"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-table', template: "<div *ngIf=\"enableFiltering === true\" class=\"form\">\n  <label class=\"inp\" for=\"inp\">\n    <input (keyup)=\"applyFilter($event)\" id=\"inp-search-filter\" placeholder=\" \" type=\"text\">\n    <span class=\"label\">Suchen & Filtern</span>\n    <span class=\"focus-bg\"></span>\n  </label>\n</div>\n<table #table [dataSource]=\"dataSource\" class=\"inventar-table mat-elevation-z8\" mat-table matSort>\n\n  <div *ngIf=\"enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"!enableSort\">\n    <ng-container *ngFor=\"let column of columns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <span *ngIf=\"!!column.backendPath\"\n              [style]=\"column.style\">{{element[column.backendPath.toString()][column.backendName]}}</span>\n        <span *ngIf=\"column.backendPath === undefined\" [style]=\"column.style\">{{element[column.backendName]}}</span>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"showStatusLabel\" matColumnDef=\"statusLabelColumn\">\n      <th *matHeaderCellDef mat-header-cell mat-sort-header>{{statusHeaderLabel}}</th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <engo-uik-status-label [labelData]=\"element.statusLabel\"></engo-uik-status-label>\n      </td>\n    </ng-container>\n\n  </div>\n\n  <div *ngIf=\"actionColumns\">\n    <ng-container *ngFor=\"let column of actionColumns\" matColumnDef={{column.name}}>\n      <th *matHeaderCellDef mat-header-cell> {{column.displayName}} </th>\n      <td *matCellDef=\"let element; index as i\" mat-cell>\n        <a (click)=\"emitActionButtonClicked(column.name, i)\" class=\"btn-icon-button action-button\">\n          <i (click)=\"emitActionButtonClicked(column.name, i)\" [id]=\"'callAction'\" [ngClass]=\"column.faIconName\"></i>\n        </a>\n      </td>\n    </ng-container>\n  </div>\n\n  <tr *matHeaderRowDef=\"displayedColumns; sticky: true\" mat-header-row></tr>\n  <tr *matRowDef=\"let element; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator *ngIf=\"enablePagination\"\n               [pageSizeOptions]=\"paginatorPageOptions && paginatorPageOptions.length > 0 ? paginatorPageOptions : [10, 25, 50, 100, 200]\"\n               showFirstLastButtons></mat-paginator>\n", styles: ["table.mat-mdc-table{display:table;width:100%}table{position:sticky}.action-button{cursor:pointer}.form{float:left}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { columns: [{
                type: Input
            }], actionColumns: [{
                type: Input
            }], statusHeaderLabel: [{
                type: Input
            }], showStatusLabel: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], enablePagination: [{
                type: Input
            }], paginatorPageOptions: [{
                type: Input
            }], enableSort: [{
                type: Input
            }], enableFiltering: [{
                type: Input
            }], actionButtonClicked: [{
                type: Output
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], table: [{
                type: ViewChild,
                args: [MatTable]
            }] } });

class UikTableModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikTableModule, declarations: [UikTableComponent], imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            UikStatusLabelModule], exports: [UikTableComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableModule, imports: [CommonModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            UikStatusLabelModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikTableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [UikTableComponent],
                    imports: [
                        CommonModule,
                        MatTableModule,
                        MatSortModule,
                        MatPaginatorModule,
                        UikStatusLabelModule
                    ],
                    exports: [
                        UikTableComponent
                    ]
                }]
        }] });

class UikConfirmationDialogComponent {
    constructor(data, dialogRef) {
        this.dialogRef = dialogRef;
        this.message = 'Are you sure?';
        this.confirmButtonText = 'Yes';
        this.cancelButtonText = 'Cancel';
        this.confirmFaIconClass = 'fa fa-trash';
        this.cancelFaIconClass = 'fa fa-ban';
        if (data) {
            this.message = data.message || this.message;
            if (data.buttonText) {
                this.confirmButtonText = data.buttonText.ok || this.confirmButtonText;
                this.cancelButtonText = data.buttonText.cancel || this.cancelButtonText;
            }
            if (data.buttonIcons) {
                this.confirmFaIconClass = data.buttonIcons.ok || this.confirmFaIconClass;
                this.cancelFaIconClass = data.buttonIcons.cancel || this.cancelFaIconClass;
            }
        }
    }
    ngOnInit() {
    }
    onConfirmClick() {
        this.dialogRef.close(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1$3.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UikConfirmationDialogComponent, selector: "engo-uik-confirmation-dialog", ngImport: i0, template: "<mat-dialog-content class=\"confirmation-dialog-content\">\n  <p>\n    {{message}}\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button class=\"btn-action-button btn-gray\" mat-dialog-close><i\n    [class]=\"cancelFaIconClass + ' btn-icon'\"></i>{{cancelButtonText}}</button>\n\n  <button (click)=\"onConfirmClick()\" class=\"btn-action-button\"><i\n    [class]=\"confirmFaIconClass + ' btn-icon'\"></i>{{confirmButtonText}}</button>\n</mat-dialog-actions>\n", styles: [".mat-mdc-dialog-actions{display:flex;justify-content:right;margin:12px;flex-wrap:wrap}.btn-action-button{margin-right:12px}.confirmation-dialog-content{max-width:1000px}\n"], dependencies: [{ kind: "directive", type: i1$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i1$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i1$3.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'engo-uik-confirmation-dialog', template: "<mat-dialog-content class=\"confirmation-dialog-content\">\n  <p>\n    {{message}}\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button class=\"btn-action-button btn-gray\" mat-dialog-close><i\n    [class]=\"cancelFaIconClass + ' btn-icon'\"></i>{{cancelButtonText}}</button>\n\n  <button (click)=\"onConfirmClick()\" class=\"btn-action-button\"><i\n    [class]=\"confirmFaIconClass + ' btn-icon'\"></i>{{confirmButtonText}}</button>\n</mat-dialog-actions>\n", styles: [".mat-mdc-dialog-actions{display:flex;justify-content:right;margin:12px;flex-wrap:wrap}.btn-action-button{margin-right:12px}.confirmation-dialog-content{max-width:1000px}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1$3.MatDialogRef }]; } });

class UikConfirmationDialogModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogModule, declarations: [UikConfirmationDialogComponent], imports: [CommonModule,
            MatDialogModule], exports: [UikConfirmationDialogComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogModule, imports: [CommonModule,
            MatDialogModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UikConfirmationDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        UikConfirmationDialogComponent
                    ],
                    imports: [
                        CommonModule,
                        MatDialogModule,
                    ],
                    exports: [
                        UikConfirmationDialogComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of cps-ui-kit-lib
 */
/*
 Uik Form Loading
 */

/**
 * Generated bundle index. Do not edit.
 */

export { UikConfirmationDialogComponent, UikConfirmationDialogModule, UikFormLegendComponent, UikFormLegendModule, UikFormLoadingComponent, UikFormLoadingModule, UikFormsComponent, UikFormsModule, UikRoutingLoadingBarComponent, UikRoutingLoadingBarModule, UikStatusLabelComponent, UikStatusLabelModule, UikTableCheckboxComponent, UikTableCheckboxModule, UikTableComponent, UikTableEditmodeComponent, UikTableEditmodeModule, UikTableFilterByListMenuComponent, UikTableFilterByListMenuModule, UikTableFilterMenuComponent, UikTableFilterMenuModule, UikTableLoadingComponent, UikTableLoadingModule, UikTableModule, UikTableMoreActions, UikTableMoreActionsModule };
//# sourceMappingURL=engo-engo-ui-kit-lib.mjs.map
